{"version":3,"file":"ModalForm.js","sources":["../../../../resources/js/modules/bootstrap/components/Dropdown.vue","../../../../resources/js/modules/bootstrap/components/DropdownItem.vue","../../../../resources/js/components/Pagination.vue","../../../../resources/js/components/Search.vue","../../../../resources/js/modules/crud/components/Crud.vue","../../../../resources/js/lib/helper/object.ts","../../../../resources/js/modules/crud/lib/crud.ts","../../../../resources/js/modules/form/components/helper/ModalForm.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport Button from \"@/modules/bootstrap/components/Button.vue\";\r\nimport { DropdownDirection, DropdownAlignment } from \"../types\";\r\nimport Dropdown from \"bootstrap/js/src/dropdown\";\r\nimport { ref, onMounted, onUnmounted, computed, watch } from \"vue\";\r\nimport Wrapper from \"@/components/Wrapper.vue\";\r\n\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n});\r\n\r\ntype Slots = {\r\n  button: any;\r\n  default: any;\r\n};\r\ndefineSlots<Slots>();\r\n\r\ntype Props = {\r\n  title?: string;\r\n  split?: boolean;\r\n  center?: boolean;\r\n  direction?: DropdownDirection;\r\n  alignment?: DropdownAlignment;\r\n  smStart?: boolean;\r\n  mdStart?: boolean;\r\n  lgStart?: boolean;\r\n  xlStart?: boolean;\r\n  xxlStart?: boolean;\r\n  smEnd?: boolean;\r\n  mdEnd?: boolean;\r\n  lgEnd?: boolean;\r\n  xlEnd?: boolean;\r\n  xxlEnd?: boolean;\r\n  autoClose?: boolean | \"inside\" | \"outside\";\r\n  offset?: [number, number];\r\n  menuOptions?: { [name: string]: any };\r\n  div?: boolean;\r\n  flat?: boolean;\r\n  noArrow?: boolean;\r\n};\r\nconst {\r\n  title = \"\",\r\n  split = false,\r\n  center = false,\r\n  direction = \"down\",\r\n  alignment = \"start\",\r\n  smStart = false,\r\n  mdStart = false,\r\n  lgStart = false,\r\n  xlStart = false,\r\n  xxlStart = false,\r\n  smEnd = false,\r\n  mdEnd = false,\r\n  lgEnd = false,\r\n  xlEnd = false,\r\n  xxlEnd = false,\r\n  autoClose = false,\r\n  offset = [0, 2],\r\n  menuOptions = {},\r\n  div = false,\r\n  flat = false,\r\n  noArrow = false,\r\n} = defineProps<Props>();\r\n\r\nconst dropdownRef = ref<any>(null);\r\nconst dropdown = ref<any>(null);\r\n\r\nwatch(\r\n  () => dropdownRef,\r\n  (newRef) => {\r\n    if (newRef) {\r\n      create();\r\n    }\r\n  },\r\n  { deep: true }\r\n);\r\n\r\ntype Emits = {\r\n  close: any;\r\n  closed: any;\r\n  prevented: any;\r\n  open: any;\r\n  opened: any;\r\n};\r\nconst emit = defineEmits<Emits>();\r\n\r\nconst onClose = (e) => {\r\n  emit(\"close\", e);\r\n};\r\n\r\nconst onClosed = (e) => {\r\n  emit(\"closed\", e);\r\n};\r\n\r\nconst onOpen = (e) => {\r\n  emit(\"open\", e);\r\n};\r\n\r\nconst onOpened = (e) => {\r\n  emit(\"opened\", e);\r\n};\r\n\r\nconst create = () => {\r\n  dropdown.value = new Dropdown(dropdownRef.value, { autoClose, offset });\r\n  dropdownRef.value.addEventListener(\"hide.bs.dropdown\", onClose);\r\n  dropdownRef.value.addEventListener(\"hidden.bs.dropdown\", onClosed);\r\n  dropdownRef.value.addEventListener(\"show.bs.dropdown\", onOpen);\r\n  dropdownRef.value.addEventListener(\"shown.bs.dropdown\", onOpened);\r\n};\r\n\r\nconst open = () => {\r\n  dropdown.value?.show?.();\r\n};\r\n\r\nconst close = () => {\r\n  dropdown.value?.hide?.();\r\n};\r\n\r\nconst dispose = () => {\r\n  dropdownRef.value.removeEventListener(\"hide.bs.dropdown\", onClose);\r\n  dropdownRef.value.removeEventListener(\"hidden.bs.dropdown\", onClosed);\r\n  dropdownRef.value.removeEventListener(\"show.bs.dropdown\", onOpen);\r\n  dropdownRef.value.removeEventListener(\"shown.bs.dropdown\", onOpened);\r\n  dropdown.value?.dispose?.();\r\n};\r\n\r\nconst update = () => {\r\n  dropdown.value?.update?.();\r\n};\r\n\r\ndefineExpose({\r\n  open,\r\n  close,\r\n  dispose,\r\n  update,\r\n  tagName: () => (div ? \"div\" : \"ul\"),\r\n});\r\n\r\nconst menuClasses = computed(() => {\r\n  return {\r\n    \"dropdown-menu\": true,\r\n    [`dropdown-menu-${alignment}`]: true,\r\n    ...(smStart ? { \"dropdown-menu-sm-start\": true } : {}),\r\n    ...(mdStart ? { \"dropdown-menu-md-start\": true } : {}),\r\n    ...(lgStart ? { \"dropdown-menu-lg-start\": true } : {}),\r\n    ...(xlStart ? { \"dropdown-menu-xl-start\": true } : {}),\r\n    ...(xxlStart ? { \"dropdown-menu-xxl-start\": true } : {}),\r\n    ...(smEnd ? { \"dropdown-menu-sm-end\": true } : {}),\r\n    ...(mdEnd ? { \"dropdown-menu-md-end\": true } : {}),\r\n    ...(lgEnd ? { \"dropdown-menu-lg-end\": true } : {}),\r\n    ...(xlEnd ? { \"dropdown-menu-xl-end\": true } : {}),\r\n    ...(xxlEnd ? { \"dropdown-menu-xxl-end\": true } : {}),\r\n  };\r\n});\r\n\r\nonMounted(() => {\r\n  // create();\r\n});\r\n\r\nonUnmounted(() => {\r\n  dispose();\r\n});\r\n</script>\r\n<template>\r\n  <Wrapper\r\n    :tag=\"flat ? 'div' : false\"\r\n    :class=\"{\r\n      'btn-group': true,\r\n      [`drop${direction}${center ? '-center' : ''}`]: true,\r\n    }\"\r\n  >\r\n    <Button\r\n      :class=\"{ 'dropdown-toggle': !split, 'no-arrow': noArrow }\"\r\n      :data-bs-toggle=\"!split ? 'dropdown' : false\"\r\n      aria-expanded=\"false\"\r\n      @click=\"open\"\r\n      :ref=\"\r\n        (el: any) => {\r\n          if (!split) {\r\n            dropdownRef = el.element();\r\n          }\r\n        }\r\n      \"\r\n      v-binds=\"$attrs\"\r\n    >\r\n      <slot name=\"button\"> {{ title }} </slot>\r\n    </Button>\r\n    <template v-if=\"split\">\r\n      <Button\r\n        class=\"dropdown-toggle dropdown-toggle-split\"\r\n        :class=\"{ 'no-arrow': noArrow }\"\r\n        data-bs-toggle=\"dropdown\"\r\n        aria-expanded=\"false\"\r\n        @click=\"open\"\r\n        v-binds=\"$attrs\"\r\n        :ref=\"(el: any) => {\r\n          if (!split) {\r\n            dropdownRef = el.element();\r\n          }\r\n        }\"\r\n      >\r\n        <span class=\"visually-hidden\">Toggle Dropdown</span>\r\n      </Button>\r\n    </template>\r\n    <component\r\n      :is=\"div ? 'div' : 'ul'\"\r\n      :class=\"menuClasses\"\r\n      v-binds=\"menuOptions\"\r\n    >\r\n      <slot></slot>\r\n    </component>\r\n  </Wrapper>\r\n</template>\r\n<style scoped lang=\"scss\">\r\n.dropdown-toggle {\r\n  &.no-arrow {\r\n    &:after {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { getCurrentInstance, computed } from \"vue\";\r\n\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n});\r\n\r\nconst instance = getCurrentInstance();\r\n\r\nconst type = computed(\r\n  () =>\r\n    instance?.parent?.subTree?.children?.[2]?.type\r\n      ?.toString?.()\r\n      ?.toLowerCase?.() ?? null\r\n);\r\n</script>\r\n<template>\r\n  <template v-if=\"type === 'ul'\">\r\n    <li>\r\n      <a class=\"dropdown-item\" href=\"#\" v-bind=\"$attrs\" @click.prevent>\r\n        <slot></slot>\r\n      </a>\r\n    </li>\r\n  </template>\r\n  <template v-if=\"type === 'div'\">\r\n    <a class=\"dropdown-item\" href=\"#\" v-bind=\"$attrs\" @click.prevent>\r\n      <slot></slot>\r\n    </a>\r\n  </template>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { pagination } from \"@/lib/helper/functions\";\r\nimport { translate } from \"@/lib/metadata\";\r\nimport { computed, ref, watch } from \"vue\";\r\nimport Icon from \"@/components/Icon.vue\";\r\nimport {\r\n  mdiChevronDoubleLeft,\r\n  mdiChevronDoubleRight,\r\n  mdiChevronLeft,\r\n  mdiChevronRight,\r\n} from \"@mdi/js\";\r\nimport Dropdown from \"@/modules/bootstrap/components/Dropdown.vue\";\r\nimport DropdownItem from \"@/modules/bootstrap/components/DropdownItem.vue\";\r\n\r\ntype Props = {\r\n  page?: number;\r\n  perPage?: number;\r\n  total?: number;\r\n  pages?: number;\r\n  buttons?: number;\r\n  sizes?: Array<number>;\r\n};\r\n\r\nconst {\r\n  page = 1,\r\n  perPage = 10,\r\n  total = 0,\r\n  buttons = 5,\r\n  sizes = [5, 10, 25, 50],\r\n} = defineProps<Props>();\r\n\r\ntype Emits = {\r\n  \"update:page\": any;\r\n  \"update:perPage\": any;\r\n  \"update:total\": any;\r\n  \"update:buttons\": any;\r\n  change: any;\r\n};\r\nconst emit = defineEmits<Emits>();\r\n\r\nconst currentPage = ref(page);\r\nconst customPage = ref(page);\r\nconst pageSize = ref(perPage);\r\nconst pagesNb = computed(() => Math.ceil(total / pageSize.value));\r\nconst items = computed(() =>\r\n  pagination(currentPage.value, perPage, total, buttons)\r\n);\r\nconst dropDown: any = ref(null);\r\n\r\nwatch(\r\n  [currentPage, pageSize],\r\n  () => {\r\n    emit(\"update:page\", currentPage);\r\n    emit(\"update:perPage\", pageSize);\r\n    emit(\"update:total\", total);\r\n    emit(\"update:buttons\", buttons);\r\n    emit(\"change\", {\r\n      page: currentPage,\r\n      perPage: pageSize,\r\n      total: total,\r\n      pages: pagesNb.value,\r\n      buttons: buttons,\r\n    });\r\n  },\r\n  { deep: true }\r\n);\r\n\r\nwatch(pageSize, () => {\r\n  currentPage.value = 1;\r\n});\r\n\r\nconst goTo = (page) => {\r\n  currentPage.value = page;\r\n};\r\nconst increment = () => {\r\n  customPage.value++;\r\n  if (customPage.value > pagesNb.value) {\r\n    customPage.value = 1;\r\n  }\r\n};\r\nconst decrement = () => {\r\n  customPage.value--;\r\n  if (customPage.value < 1) {\r\n    customPage.value = pagesNb.value;\r\n  }\r\n};\r\nconst changeSize = (size) => {\r\n  pageSize.value = size;\r\n  dropDown.close();\r\n};\r\n\r\ndefineExpose({ goTo, increment, decrement, changeSize });\r\n</script>\r\n<template>\r\n  <div class=\"pagination-component\">\r\n    <div class=\"count\" v-if=\"total > 0\">\r\n      {{\r\n        translate(\r\n          \":?-:? of :? rows\",\r\n          perPage * currentPage - (perPage - 1),\r\n          perPage * currentPage <= total ? perPage * currentPage : total,\r\n          total\r\n        )\r\n      }}\r\n    </div>\r\n    <nav aria-label=\"Page navigation\" v-if=\"items.length > 1\" class=\"pages\">\r\n      <ul class=\"pagination pagination-sm\">\r\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\r\n          <a\r\n            class=\"page-link\"\r\n            href=\"#\"\r\n            tabindex=\"-1\"\r\n            aria-disabled=\"true\"\r\n            @click.prevent=\"goTo(1)\"\r\n          >\r\n            <Icon :path=\"mdiChevronDoubleLeft\" />\r\n          </a>\r\n        </li>\r\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\r\n          <a\r\n            class=\"page-link\"\r\n            href=\"#\"\r\n            tabindex=\"-1\"\r\n            aria-disabled=\"true\"\r\n            @click.prevent=\"goTo(currentPage - 1)\"\r\n          >\r\n            <Icon :path=\"mdiChevronLeft\" />\r\n          </a>\r\n        </li>\r\n        <li\r\n          class=\"page-item\"\r\n          v-for=\"p in items\"\r\n          :key=\"p\"\r\n          :class=\"{ active: p === currentPage }\"\r\n        >\r\n          <span class=\"page-link\" v-if=\"p === currentPage\">{{ p }}</span>\r\n          <a v-else class=\"page-link\" href=\"#\" @click.prevent=\"goTo(p)\">{{\r\n            p\r\n          }}</a>\r\n        </li>\r\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === pagesNb }\">\r\n          <a class=\"page-link\" href=\"#\" @click.prevent=\"goTo(currentPage + 1)\">\r\n            <Icon :path=\"mdiChevronRight\" />\r\n          </a>\r\n        </li>\r\n        <li class=\"page-item\" :class=\"{ disabled: currentPage === pagesNb }\">\r\n          <a\r\n            class=\"page-link\"\r\n            href=\"#\"\r\n            tabindex=\"-1\"\r\n            aria-disabled=\"true\"\r\n            @click.prevent=\"goTo(pagesNb)\"\r\n          >\r\n            <Icon :path=\"mdiChevronDoubleRight\" />\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <div class=\"per-page\">\r\n      <Dropdown\r\n        v-if=\"total > 0\"\r\n        ref=\"dropDown\"\r\n        :title=\"`${perPage} ${translate('rows')}`\"\r\n        auto-close\r\n      >\r\n        <template v-for=\"(size, i) in sizes\" :key=\"size\">\r\n          <DropdownItem\r\n            v-if=\"i === 0 || (sizes.at(i - 1) ?? 0) <= total\"\r\n            @click.prevent=\"changeSize(size)\"\r\n            >{{ size }} {{ translate(\"rows\") }}</DropdownItem\r\n          >\r\n        </template>\r\n      </Dropdown>\r\n    </div>\r\n  </div>\r\n</template>\r\n<style scoped lang=\"scss\">\r\n@import \"@scss/config\";\r\n@import \"@scss/mixins/font-size\";\r\n@import \"@scss/mixins/dark\";\r\n\r\n.pagination-component {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 30px;\r\n  min-width: 100%;\r\n  height: 40px;\r\n\r\n  .count {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    color: $gray-6;\r\n    @include font-size(0.9);\r\n  }\r\n  .pages {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    .pagination {\r\n      margin: 0;\r\n      .page-item {\r\n        cursor: pointer;\r\n        .page-link {\r\n          @include font-size(1.2);\r\n          height: 40px;\r\n          min-width: 40px;\r\n          display: flex;\r\n          flex-direction: row;\r\n          align-items: center;\r\n          justify-content: center;\r\n        }\r\n        &.active {\r\n          .page-link {\r\n            @include dark {\r\n              background-color: $info;\r\n              border-color: darken($info, 10%);\r\n            }\r\n          }\r\n        }\r\n        &.disabled {\r\n          cursor: not-allowed;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .per-page {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { translate } from \"@/lib/metadata\";\r\nimport Icon from \"@/components/Icon.vue\";\r\nimport { mdiClose, mdiSearchWeb } from \"@mdi/js\";\r\nimport { ref } from \"vue\";\r\n\r\ntype Props = {\r\n  modelValue: string;\r\n};\r\n\r\nconst { modelValue } = defineProps<Props>();\r\n\r\nconst emit = defineEmits([\"update:modelValue\", \"clear\", \"search\"]);\r\n\r\nconst changeValue = (event) => {\r\n  emit(\"update:modelValue\", event.target.value.trim());\r\n};\r\nconst clear = () => {\r\n  emit(\"clear\");\r\n};\r\nconst search = () => {\r\n  emit(\"search\");\r\n};\r\n</script>\r\n<template>\r\n  <div class=\"input-group search-input-group\">\r\n    <template v-if=\"$slots['start-search']\">\r\n      <slot name=\"start-search\"> </slot>\r\n    </template>\r\n    <button\r\n      v-if=\"modelValue !== ''\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary\"\r\n      @click=\"clear\"\r\n    >\r\n      <Icon :path=\"mdiClose\" />\r\n    </button>\r\n    <template v-if=\"$slots['before-search']\">\r\n      <slot name=\"before-search\"> </slot>\r\n    </template>\r\n    <input\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n      :placeholder=\"translate('Search...')\"\r\n      :value=\"modelValue\"\r\n      @input=\"changeValue($event)\"\r\n      @keydown.stop.enter=\"search\"\r\n      @keydown.stop.esc=\"clear\"\r\n    />\r\n    <template v-if=\"$slots['after-search']\">\r\n      <slot name=\"after-search\"> </slot>\r\n    </template>\r\n    <button type=\"button\" class=\"btn btn-primary\" @click.prevent=\"search\">\r\n      <Icon :path=\"mdiSearchWeb\" />\r\n    </button>\r\n    <template v-if=\"$slots['end-search']\">\r\n      <slot name=\"end-search\"> </slot>\r\n    </template>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\" generic=\"T extends {} = {}, S extends string = string\">\r\nimport Icon from \"@/components/Icon.vue\";\r\nimport { Fields, FetchCallback, Field } from \"@/modules/crud/lib/crud\";\r\nimport { isDark, useThemeStore } from \"@/modules/theme\";\r\nimport {\r\n  mdiDotsVertical,\r\n  mdiMinusBoxOutline,\r\n  mdiPlusBoxOutline,\r\n  mdiRefresh,\r\n  mdiSort,\r\n  mdiSortAscending,\r\n  mdiSortDescending,\r\n} from \"@mdi/js\";\r\nimport { shallowRef, ref, computed, getCurrentInstance, onMounted } from \"vue\";\r\nimport { storeToRefs } from \"pinia\";\r\nimport Pagination from \"@/components/Pagination.vue\";\r\nimport Search from \"@/components/Search.vue\";\r\nimport Dropdown from \"@/modules/bootstrap/components/Dropdown.vue\";\r\nimport Button from \"@/modules/bootstrap/components/Button.vue\";\r\n\r\ntype Props = {\r\n  fields: Fields<S>;\r\n  fetch: FetchCallback<T>;\r\n  keyName?: string;\r\n};\r\n\r\nconst { fields, fetch, keyName = \"id\" } = defineProps<Props>();\r\n\r\nconst columns = computed<Fields<S>>(() => fields);\r\n\r\ntype GlobalSlots = {\r\n  before: any;\r\n  after: any;\r\n  topActions: any;\r\n  actions: (props: { item: T }) => any;\r\n  moreActions: (props: { item: T }) => any;\r\n  details: (props: { item: T }) => any;\r\n};\r\n\r\ntype HeaderSlots = {\r\n  [Property in S as `${Property}Header`]: (props: {\r\n    field: Field<Property>;\r\n  }) => any;\r\n};\r\n\r\ntype ValueSlots = {\r\n  [Property in S as `${Property}Value`]: (props: {\r\n    field: Field<Property>;\r\n    item: T;\r\n  }) => any;\r\n};\r\n\r\ntype Slots = GlobalSlots & HeaderSlots & ValueSlots;\r\ndefineSlots<Slots>();\r\n\r\ntype Emits = {\r\n  empty: any;\r\n  noEmpty: any;\r\n};\r\nconst emit = defineEmits<Emits>();\r\n\r\nconst instance = getCurrentInstance();\r\n\r\nconst themeStore = useThemeStore();\r\nconst { isDarkTheme } = storeToRefs<any>(themeStore);\r\n\r\nconst data = shallowRef<T[]>([]);\r\nconst page = ref<number>(1);\r\nconst perPage = ref<number>(5);\r\nconst keyword = ref<any>(\"\");\r\nconst sortName = ref<string>(keyName);\r\nconst sortAsc = ref<boolean>(true);\r\nconst total = ref(0);\r\nconst pages = ref(0);\r\nconst pagesButtons = ref(5);\r\nconst details = ref<any>({});\r\nconst refresher = ref<any>(null);\r\nconst version = ref<number>(0);\r\n\r\nconst load = async () => {\r\n  refresher.value?.start?.();\r\n  try {\r\n    const response = await fetch({\r\n      page: page.value,\r\n      perPage: perPage.value,\r\n      keyword: keyword.value,\r\n      sort: `${sortAsc.value ? \"\" : \"-\"}${sortName.value}`.trim(),\r\n      fields: columns.value,\r\n    });\r\n    data.value = response.data;\r\n    total.value = response?.total ?? 0;\r\n    page.value = response?.page ?? 1;\r\n    perPage.value = response?.perPage ?? 1;\r\n    pages.value = response?.pages ?? 0;\r\n    details.value = {};\r\n    if (data.value.length > 0) {\r\n      emit(\"noEmpty\");\r\n    } else {\r\n      emit(\"empty\");\r\n    }\r\n    version.value++;\r\n  } catch (e: any) {}\r\n  refresher.value?.stop?.();\r\n};\r\n\r\nconst loadSort = async (field: Field<S>) => {\r\n  if (field.sortable) {\r\n    sortName.value = field.name;\r\n    sortAsc.value = !sortAsc.value;\r\n    load();\r\n  }\r\n};\r\n\r\nconst changePage = (pagination) => {\r\n  page.value = pagination.page.value;\r\n  perPage.value = pagination.perPage.value;\r\n  load();\r\n};\r\n\r\nconst search = () => {\r\n  page.value = 1;\r\n  load();\r\n};\r\nconst clear = () => {\r\n  page.value = 1;\r\n  keyword.value = \"\";\r\n  load();\r\n};\r\n\r\nconst refresh = () => {\r\n  load();\r\n};\r\n\r\nconst isVisible = (field: Field) => {\r\n  return field.visible === undefined || field.visible;\r\n};\r\n\r\nconst colsCount = computed(() => {\r\n  return (\r\n    fields.filter((field) => isVisible(field)).length +\r\n    1 /* countable rows # */ +\r\n    (instance?.proxy?.$slots?.actions ? 1 : 0) +\r\n    (instance?.proxy?.$slots?.moreActions ? 1 : 0) +\r\n    (instance?.proxy?.$slots?.details ? 1 : 0)\r\n  );\r\n});\r\n\r\nconst toggleDetails = (item: T) => {\r\n  details.value = { ...details.value, [item[keyName]]: !inDetailsMode(item) };\r\n};\r\n\r\nconst inDetailsMode = (item: T) => {\r\n  return (\r\n    Object.hasOwn(details.value, item[keyName]) && details.value[item[keyName]]\r\n  );\r\n};\r\n\r\nconst length = computed(() => data.value?.length ?? 0)\r\n\r\nonMounted(() => {\r\n  load();\r\n});\r\n\r\ndefineExpose({ refresh, length: () => length.value, data: () => data.value });\r\n</script>\r\n<template>\r\n  <div class=\"crud-component\" :key=\"`crud-${version}`\">\r\n    <slot name=\"start\"></slot>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-5\">\r\n        <div class=\"d-flex flex-horizontal gap-3\">\r\n          <Button\r\n            color=\"primary\"\r\n            @click=\"refresh\"\r\n            ref=\"refresher\"\r\n            spinner-small\r\n            spinner-color=\"light\"\r\n            style=\"min-width: 50px\"\r\n          >\r\n            <Icon :path=\"mdiRefresh\" />\r\n          </Button>\r\n          <Search v-model=\"keyword\" @clear=\"clear\" @search=\"search\">\r\n            <template v-if=\"$slots['start-search']\" #start-search>\r\n              <slot name=\"start-search\"> </slot>\r\n            </template>\r\n            <template v-if=\"$slots['before-search']\" #before-search>\r\n              <slot name=\"before-search\"> </slot>\r\n            </template>\r\n            <template v-if=\"$slots['after-search']\" #after-search>\r\n              <slot name=\"after-search\"> </slot>\r\n            </template>\r\n            <template v-if=\"$slots['end-search']\" #end-search>\r\n              <slot name=\"end-search\"> </slot>\r\n            </template>\r\n          </Search>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-7\">\r\n        <div class=\"d-flex gap-2 justify-content-end align-items-center h-100\">\r\n          <slot name=\"topActions\"></slot>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <slot name=\"before\"></slot>\r\n    <div class=\"table-responsive\">\r\n      <table\r\n        class=\"table table-bordered table-striped table-hover m-0\"\r\n        :class=\"{ 'table-dark': isDarkTheme }\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th v-if=\"$slots.details\" class=\"fitable no-select\">&nbsp;</th>\r\n            <th class=\"fitable no-select\">#</th>\r\n            <template\r\n              v-for=\"(field, index) in columns\"\r\n              :key=\"`${field.name}-${index}`\"\r\n            >\r\n              <th\r\n                v-if=\"isVisible(field)\"\r\n                :class=\"{\r\n                  fitable: field.fitable,\r\n                  'no-select': true,\r\n                  pointer: field.sortable,\r\n                  'table-active': field.sortable && sortName === field.name,\r\n                }\"\r\n              >\r\n                <div class=\"d-flex gap-2\" @click.prevent.stop=\"loadSort(field)\">\r\n                  <span>\r\n                    <slot :name=\"`${field.name}Header`\" :field=\"field\">\r\n                      {{ field.label }}\r\n                    </slot>\r\n                  </span>\r\n                  <template v-if=\"field.sortable && sortName === field.name\">\r\n                    <Icon\r\n                      :path=\"sortAsc ? mdiSortAscending : mdiSortDescending\"\r\n                      :class=\"{ 'ms-auto': true }\"\r\n                      :color=\"isDark() ? 'info' : 'primary'\"\r\n                    />\r\n                  </template>\r\n                  <template v-else>\r\n                    <Icon :path=\"mdiSort\" class=\"ms-auto text-muted\" />\r\n                  </template>\r\n                </div>\r\n              </th>\r\n            </template>\r\n            <template v-if=\"$slots.moreActions || $slots.actions\">\r\n              <th\r\n                :colspan=\"$slots.moreActions && $slots.actions ? 2 : 1\"\r\n                class=\"fitable no-select\"\r\n              >\r\n                Actions\r\n              </th>\r\n            </template>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <template v-for=\"(item, r) in data\" :key=\"item[keyName]\">\r\n            <tr>\r\n              <td v-if=\"$slots.details\" class=\"fitable no-select align-middle\">\r\n                <Icon\r\n                  :path=\"\r\n                    inDetailsMode(item) ? mdiMinusBoxOutline : mdiPlusBoxOutline\r\n                  \"\r\n                  @click=\"toggleDetails(item)\"\r\n                  class=\"pointer\"\r\n                />\r\n              </td>\r\n              <td class=\"fitable no-select align-middle\">{{ r + 1 }}</td>\r\n              <template\r\n                v-for=\"(field, c) in columns\"\r\n                :key=\"`${field.name}-${c}`\"\r\n              >\r\n                <td\r\n                  v-if=\"isVisible(field)\"\r\n                  :class=\"{\r\n                    fitable: field.fitable,\r\n                    'select-all': true,\r\n                    'table-active': field.sortable && sortName === field.name,\r\n                    border: field.sortable && sortName === field.name,\r\n                    'align-middle': true,\r\n                  }\"\r\n                >\r\n                  <slot\r\n                    :name=\"`${field.name}Value`\"\r\n                    :field=\"field\"\r\n                    :item=\"item\"\r\n                  >\r\n                    {{ item[field.name as string] }}\r\n                  </slot>\r\n                </td>\r\n              </template>\r\n              <template v-if=\"$slots.actions\">\r\n                <td class=\"fitable no-select align-middle\">\r\n                  <div class=\"d-flex gap-2 align-items-start\">\r\n                    <slot name=\"actions\" :item=\"item\"></slot>\r\n                  </div>\r\n                </td>\r\n              </template>\r\n              <template v-if=\"$slots.moreActions\">\r\n                <td class=\"fitable no-select align-middle\">\r\n                  <Dropdown no-arrow div>\r\n                    <template #button>\r\n                      <Icon :path=\"mdiDotsVertical\" />\r\n                    </template>\r\n                    <slot name=\"moreActions\" :item=\"item\"></slot>\r\n                  </Dropdown>\r\n                </td>\r\n              </template>\r\n            </tr>\r\n            <template v-if=\"$slots.details && inDetailsMode(item)\">\r\n              <tr>\r\n                <td :colspan=\"colsCount\" class=\"p-0 align-middle\">\r\n                  <slot name=\"details\" :item=\"item\"></slot>\r\n                </td>\r\n              </tr>\r\n            </template>\r\n          </template>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <slot name=\"after\"></slot>\r\n    <Pagination\r\n      v-model:page=\"page\"\r\n      v-model:per-page=\"perPage\"\r\n      v-model:total=\"total\"\r\n      v-model:buttons=\"pagesButtons\"\r\n      @change=\"changePage\"\r\n    >\r\n    </Pagination>\r\n    <slot name=\"end\"></slot>\r\n  </div>\r\n</template>\r\n<style scoped lang=\"scss\">\r\n.crud-component {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n.fitable {\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  width: 1%;\r\n}\r\n.no-select {\r\n  user-select: none;\r\n}\r\n.select-all {\r\n  user-select: all;\r\n}\r\n.pointer {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n","export function serialize(obj: any, prefix: any = null): string {\r\n    const str: any = [];\r\n    let p: any;\r\n    for (p in obj) {\r\n      if (obj.hasOwnProperty(p)) {\r\n        const k = prefix ? `${prefix}[${p}]` : p;\r\n        const v = obj[p];\r\n        str.push(v !== null && typeof v === \"object\" ? serialize(v, k) : `${encodeURIComponent(k)}=${encodeURIComponent(v)}`);\r\n      }\r\n    }\r\n    return str.join(\"&\");\r\n  }\r\n  ","import { api } from \"@/lib/api\";\r\nimport { serialize } from \"@/lib/helper/object\";\r\n\r\nexport enum FieldType {\r\n  Number = \"number\",\r\n  String = \"string\",\r\n  Enum = \"enum\",\r\n}\r\n\r\nexport type Field<S extends string = string> = {\r\n  type: FieldType;\r\n  name: S;\r\n  label: string;\r\n  sortable?: boolean;\r\n  searchable?: boolean;\r\n  visible?: boolean;\r\n  fitable?: boolean;\r\n};\r\n\r\nexport type Fields<S extends string = string> = Array<Field<S>>;\r\n\r\nexport type FetchCallbackArgs = {\r\n  page: number;\r\n  perPage: number;\r\n  keyword: any;\r\n  sort: string;\r\n  fields: Fields;\r\n};\r\n\r\nexport type CrudResponse<T> = {\r\n  data: T[];\r\n  total?: number;\r\n  page?: number;\r\n  perPage?: number;\r\n  pages?: number;\r\n};\r\n\r\nexport type FetchCallback<T> = (\r\n  args: FetchCallbackArgs\r\n) => Promise<CrudResponse<T>>;\r\n\r\nexport const createResponse = <T>({ data, header }: any): CrudResponse<T> => {\r\n  return {\r\n    data,\r\n    total: parseInt(header(\"x-pagination-total-count\")) ?? 0,\r\n    page: parseInt(header(\"x-pagination-current-page\")) ?? 1,\r\n    perPage: parseInt(header(\"x-pagination-per-page\")) ?? 1,\r\n    pages: parseInt(header(\"x-pagination-page-count\")) ?? 0,\r\n  };\r\n};\r\n\r\nexport const buildFilter = (keyword, fields: Fields) => {\r\n  if (keyword) {\r\n    let filter: any = [];\r\n    for (const field of fields) {\r\n      if (field.searchable) {\r\n        const obj: any = {};\r\n        if (\r\n          field.type === FieldType.Number &&\r\n          /^\\d+\\.{0,1}\\d{0,}$/.test(keyword as string)\r\n        ) {\r\n          obj[field.name] = keyword;\r\n        } else if (\r\n          field.type === FieldType.String ||\r\n          field.type === FieldType.Enum\r\n        ) {\r\n          obj[field.name] = { like: keyword };\r\n        }\r\n        if (Object.keys(obj).length > 0) {\r\n          filter.push(obj);\r\n        }\r\n      }\r\n    }\r\n    filter = { or: filter };\r\n    return serialize(filter, \"filter\");\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport type FetchResult<Item> = ({\r\n  page,\r\n  perPage,\r\n  sort,\r\n  keyword,\r\n  fields,\r\n}: any) => Promise<CrudResponse<Item>>;\r\n\r\nexport const fetch = <Item = {}>(\r\n  path: string,\r\n  expand?: string,\r\n  params?: { [name: string]: any }\r\n): FetchResult<Item> => {\r\n  return ({\r\n    page,\r\n    perPage,\r\n    sort,\r\n    keyword,\r\n    fields,\r\n  }: any): Promise<CrudResponse<Item>> => {\r\n    return new Promise((resolve, reject) => {\r\n      const extraParams = () => {\r\n        if (params && Object.keys(params).length > 0) {\r\n          let p: any = [];\r\n          for (let i in params) {\r\n            if (typeof params[i] === \"object\") {\r\n              p.push(serialize(params[i], i));\r\n            } else {\r\n              p.push(`${i}=${params[i]}`);\r\n            }\r\n          }\r\n          return `&${p.join(\"&\")}`;\r\n        }\r\n        return \"\";\r\n      };\r\n      const filters = buildFilter(keyword, fields);\r\n      api()\r\n        .get(\r\n          `${path}?${\r\n            expand ? `expand=${expand}&` : \"\"\r\n          }page=${page}&per-page=${perPage}&sort=${sort}${\r\n            filters ? `&${filters}` : \"\"\r\n          }${extraParams()}`\r\n        )\r\n        .then((response: any) => {\r\n          resolve(createResponse<Item>(response));\r\n        })\r\n        .catch((e) => {\r\n          reject(e);\r\n        });\r\n    });\r\n  };\r\n};\r\n\r\nexport const createFields = <S extends string = string>(\r\n  ...fields: Fields<S>\r\n): Fields<S> => {\r\n  return [...fields];\r\n};\r\n","<script setup lang=\"ts\" generic=\"T extends Model = Model\">\r\nimport Button from \"@/modules/bootstrap/components/Button.vue\";\r\nimport Modal from \"@/modules/bootstrap/components/Modal.vue\";\r\nimport { ModalFullscreen, ModalSize } from \"@/modules/bootstrap/types\";\r\nimport { ref, onMounted, nextTick } from \"vue\";\r\nimport { Model } from \"../../lib/model\";\r\nimport { IConstructor, createModel } from \"../../hooks/model\";\r\nimport Icon from \"@/components/Icon.vue\";\r\nimport { mdiSend } from \"@mdi/js\";\r\n\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n});\r\n\r\ntype Slots = {\r\n  default?: (props: { model: T }) => void;\r\n  header?: any\r\n};\r\ndefineSlots<Slots>();\r\n\r\ntype Props = {\r\n  modelClass: IConstructor<T>;\r\n  name: string;\r\n  size?: null | ModalSize;\r\n  fullscreen?: boolean | ModalFullscreen;\r\n};\r\nconst {\r\n  modelClass,\r\n  name,\r\n  size = null,\r\n  fullscreen = false,\r\n} = defineProps<Props>();\r\n\r\ntype Emits = {\r\n  save: [model: T, done: () => void];\r\n};\r\nconst emit = defineEmits<Emits>();\r\n\r\nconst modal = ref<any>(null);\r\nconst button = ref<any>(null);\r\n\r\nconst [model, newModel, destroyModel] = createModel(modelClass);\r\n\r\nconst open = <Item>(data?: Item) => {\r\n  newModel({...(data ?? {})});\r\n  nextTick(() => {\r\n    modal.value?.open?.();\r\n  });\r\n};\r\n\r\nconst send = () => {\r\n  model.value?.validate?.()?.then?.((valid: boolean) => {\r\n    if (valid && model.value) {\r\n      button.value?.start?.();\r\n      emit(\"save\", model.value, () => {\r\n        button.value?.stop?.();\r\n        nextTick(() => {\r\n          modal.value?.close?.();\r\n        });\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nconst unload = () => {\r\n  destroyModel();\r\n};\r\n\r\ndefineExpose({ open });\r\n</script>\r\n<template>\r\n  <Modal\r\n    v-if=\"model\"\r\n    ref=\"modal\"\r\n    tag=\"form\"\r\n    :title=\"`${model.isNewRecord ? `Add New` : `Edit`} ${name}`\"\r\n    :size=\"size\"\r\n    :fullscreen=\"fullscreen\"\r\n    @submit.prevent=\"send\"\r\n    @closed=\"unload\"\r\n  >\r\n    <template #header>\r\n      <slot name=\"header\"></slot>\r\n    </template>\r\n    <slot :model=\"model\"></slot>\r\n    <template #buttons>\r\n      <Button\r\n        type=\"submit\"\r\n        ref=\"button\"\r\n        color=\"primary\"\r\n        spinner-color=\"info\"\r\n        style=\"height: 42px\"\r\n      >\r\n        <Icon :path=\"mdiSend\" color=\"info\" />Save\r\n      </Button>\r\n    </template>\r\n  </Modal>\r\n</template>\r\n"],"names":["dropdownRef","ref","dropdown","watch","newRef","create","onClose","e","emit","onClosed","onOpen","onOpened","Dropdown","__props","open","_b","_a","close","dispose","__expose","menuClasses","computed","onMounted","onUnmounted","instance","getCurrentInstance","type","_h","_g","_f","_e","_d","_c","currentPage","customPage","pageSize","pagesNb","items","pagination","dropDown","goTo","page","increment","decrement","changeSize","size","changeValue","event","clear","search","columns","themeStore","useThemeStore","isDarkTheme","storeToRefs","data","shallowRef","perPage","keyword","sortName","sortAsc","total","pages","pagesButtons","details","refresher","version","load","response","loadSort","field","changePage","refresh","isVisible","colsCount","toggleDetails","item","inDetailsMode","length","serialize","obj","prefix","str","p","k","v","FieldType","createResponse","header","buildFilter","fields","filter","fetch","path","expand","params","sort","resolve","reject","extraParams","i","filters","api","createFields","modal","button","model","newModel","destroyModel","createModel","nextTick","send","valid","unload"],"mappings":"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"}