{"version":3,"file":"Seo.js","sources":["../../../../resources/js/lib/queue-iteration.ts","../../../../resources/js/modules/bootstrap/components/Badge.vue","../../../../resources/js/modules/seo/components/Seo.vue"],"sourcesContent":["class QueueIteration {\r\n\tprivate _action: (index: number, next: () => void) => void = () => {}\r\n\tprivate _events: any = {}\r\n\r\n\tconstructor(public count: number) {}\r\n\r\n\tset action(callback: (index: number, next: () => void) => void) {\r\n\t\tthis._action = callback\r\n\t}\r\n\r\n\tget action(): (index: number, next: () => void) => void {\r\n\t\treturn this._action\r\n\t}\r\n\r\n\ton(eventName, callback) {\r\n\t\tif (!this._events.hasOwnProperty(eventName)) {\r\n\t\t\tthis._events[eventName] = []\r\n\t\t}\r\n\t\tthis._events[eventName].push(callback)\r\n\t}\r\n\r\n\tdispatch(eventName, data: unknown = null) {\r\n\t\tif (this._events.hasOwnProperty(eventName)) {\r\n\t\t\tfor (const event of this._events[eventName]) {\r\n\t\t\t\tevent(\r\n\t\t\t\t\tnew CustomEvent(eventName, {\r\n\t\t\t\t\t\tbubbles: true,\r\n\t\t\t\t\t\tdetail: {\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdata,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}),\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstart() {\r\n\t\tthis.dispatch(\"start\")\r\n\t\texecute(this)\r\n\t}\r\n}\r\n\r\nfunction execute(queueIteration: QueueIteration, i: number = 0) {\r\n\tprogress(queueIteration, i)\r\n\tif (queueIteration.count > i) {\r\n\t\tqueueIteration.action(i, () => {\r\n\t\t\texecute(queueIteration, i + 1)\r\n\t\t})\r\n\t} else {\r\n\t\tqueueIteration.dispatch(\"done\")\r\n\t}\r\n}\r\n\r\nfunction progress(queueIteration: QueueIteration, current: number) {\r\n\tlet percentage = Math.ceil((current * 100) / queueIteration.count)\r\n\tif (percentage > 100) {\r\n\t\tpercentage = 100\r\n\t}\r\n\tqueueIteration.dispatch(\"progress\", {\r\n\t\tcurrent,\r\n\t\ttotal: queueIteration.count,\r\n\t\tpercentage: percentage,\r\n\t})\r\n}\r\n\r\nexport function createQueueIteration(count: number) {\r\n\treturn new QueueIteration(count)\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { BadgeColor } from '../types';\r\n\r\ntype Props = {\r\n    color?: BadgeColor\r\n    bgColor?: null | BadgeColor\r\n    pill?: boolean\r\n}\r\n\r\nconst { color = \"primary\", bgColor = null, pill = false } = defineProps<Props>()\r\n\r\nconst classes = computed(() => {\r\n    const cls: any = {badge:true}\r\n    if(bgColor){\r\n        cls[`text-${color}`] = true\r\n        cls[`bg-${bgColor}`] = true\r\n    }else{\r\n        cls[`text-bg-${color}`] = true\r\n    }\r\n    if(pill){\r\n        cls['rounded-pill'] = true\r\n    }\r\n    return cls\r\n})\r\n\r\n</script>\r\n<template>\r\n    <span :class=\"classes\" v-bind=\"$attrs\">\r\n        <slot></slot>\r\n    </span>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { api } from \"@/lib/api\";\r\nimport { na, nl2br } from \"@/lib/helper/strings\";\r\nimport { languages } from \"@/lib/metadata\";\r\nimport { createQueueIteration } from \"@/lib/queue-iteration\";\r\nimport Badge from \"@/modules/bootstrap/components/Badge.vue\";\r\nimport Button from \"@/modules/bootstrap/components/Button.vue\";\r\nimport { successToast } from \"@/modules/bootstrap/lib/toast\";\r\nimport Crud from \"@/modules/crud/components/Crud.vue\";\r\nimport { createFields, fetch, FieldType } from \"@/modules/crud/lib/crud\";\r\nimport StringInput from \"@/modules/form/components/StringInput.vue\";\r\nimport TextInput from \"@/modules/form/components/TextInput.vue\";\r\nimport ModalForm from \"@/modules/form/components/helper/ModalForm.vue\";\r\nimport { Field } from \"@/modules/form/lib/field\";\r\nimport { Model } from \"@/modules/form/lib/model\";\r\nimport { ref, computed } from \"vue\";\r\nimport Icon from \"@/components/Icon.vue\";\r\nimport { mdiPencil, mdiPlusThick } from \"@mdi/js\";\r\n\r\nexport type Props = {\r\n  target?: string;\r\n};\r\nconst { target } = defineProps<Props>();\r\n\r\ntype ITEM = {\r\n  id?: number;\r\n  target?: string;\r\n  title?: string;\r\n  description?: string;\r\n  keywords?: string;\r\n  is_default?: boolean;\r\n};\r\n\r\nconst fields = createFields(\r\n  {\r\n    type: FieldType.Number,\r\n    name: \"id\",\r\n    label: \"ID\",\r\n    sortable: true,\r\n    searchable: true,\r\n    fitable: true,\r\n  },\r\n  {\r\n    type: FieldType.String,\r\n    name: \"title\",\r\n    label: \"Title\",\r\n    sortable: true,\r\n    searchable: true,\r\n  },\r\n  {\r\n    type: FieldType.String,\r\n    name: \"description\",\r\n    label: \"Description\",\r\n    sortable: true,\r\n    searchable: true,\r\n  },\r\n  {\r\n    type: FieldType.String,\r\n    name: \"keywords\",\r\n    label: \"Keywords\",\r\n    sortable: true,\r\n    searchable: true,\r\n    fitable: true,\r\n  },\r\n  {\r\n    type: FieldType.String,\r\n    name: \"target\",\r\n    label: \"Page\",\r\n    sortable: true,\r\n    searchable: true,\r\n    fitable: true,\r\n  }\r\n);\r\n\r\nconst crud = ref<any>(null);\r\nconst modal = ref<any>(null);\r\nconst adder = ref<any>(null);\r\nconst isEmpty = ref<boolean>(false);\r\n\r\nclass Seo extends Model {\r\n  get id(): Field {\r\n    return this.field(\"id\", \"ID\", this.initData?.id ?? null);\r\n  }\r\n\r\n  get target(): Field {\r\n    return this.field(\"target\", \"Target\", this.initData?.target ?? null);\r\n  }\r\n\r\n  get title(): Field {\r\n    return this.field(\"title\", \"Title\", this.initData?.title ?? \"\");\r\n  }\r\n\r\n  get description(): Field {\r\n    return this.field(\r\n      \"description\",\r\n      \"Description\",\r\n      this.initData?.description ?? \"\"\r\n    );\r\n  }\r\n\r\n  get keywords(): Field {\r\n    return this.field(\r\n      \"keywords\",\r\n      \"Keywords\",\r\n      this.initData?.keywords ?? [],\r\n      \"Separate keywords by comma\"\r\n    );\r\n  }\r\n\r\n  get rules(): any[] {\r\n    return [];\r\n  }\r\n}\r\n\r\nconst setEmpty = (value: boolean) => {\r\n  isEmpty.value = value;\r\n};\r\n\r\nconst add = () => {\r\n  adder.value?.start?.();\r\n  const data = crud.value?.data?.()?.map((item: ITEM) => item.target?.split('-').at(1));\r\n  const langs = languages().filter(({ value }) => !data.includes(value))\r\n  const queue = createQueueIteration(langs.length);\r\n  queue.action = (index, next) => {\r\n    api()\r\n      .post(\"/seo\", {\r\n        target: `${target}${langs?.at?.(index)?.value}`,\r\n        keywords: [],\r\n        description: \"\",\r\n        title: `Seo Title ${new Date().getTime()}`,\r\n      })\r\n      .then(() => {\r\n        next();\r\n      });\r\n  };\r\n  queue.on(\"done\", () => {\r\n    successToast(\"Seo Created Successfully\");\r\n    crud.value?.refresh?.();\r\n    adder.value?.stop?.();\r\n  });\r\n  queue.start();\r\n};\r\n\r\nconst edit = (data) => {\r\n  const record = { ...data };\r\n  record.keywords = record.keywords.join(\"\\n\");\r\n  modal.value?.open?.(record);\r\n};\r\n\r\nconst save = (model: Seo, done: () => void) => {\r\n  const data = model.data;\r\n  data.keywords = data.keywords?.split?.(\",\") ?? [];\r\n  api()\r\n    .put(`/seo/${data.id}`, data)\r\n    .finally(() => {\r\n      successToast(\"Seo Created Successfully\");\r\n      crud.value?.refresh?.();\r\n      done();\r\n    });\r\n};\r\n\r\nconst params = computed(() => {\r\n  if (target) {\r\n    return { filter: { target: { like: target } } };\r\n  }\r\n  return undefined;\r\n});\r\n\r\nconst notAllInserted = computed(() => {\r\n  return crud.value?.length?.() < languages()?.length;\r\n});\r\n</script>\r\n<template>\r\n  <Crud\r\n    ref=\"crud\"\r\n    :fields=\"fields\"\r\n    :fetch=\"fetch < ITEM > ('/seo', undefined, params)\"\r\n    @empty=\"setEmpty(true)\"\r\n    @no-empty=\"setEmpty(false)\"\r\n  >\r\n    <template #descriptionValue=\"{ item }\">\r\n      <div v-html=\"nl2br(item?.description ?? '')\"></div>\r\n    </template>\r\n    <template #targetValue=\"{ item }\">\r\n      <div class=\"d-flex flex-horizontal gap-2\">\r\n        <Badge\r\n          color=\"primary\"\r\n          v-if=\"item?.target?.split?.('-')?.[0]?.toString()?.split?.(':')?.[0]\"\r\n          >{{\r\n            item?.target?.split?.(\"-\")?.[0]?.toString()?.split?.(\":\")?.[0] ?? \"\"\r\n          }}</Badge\r\n        >\r\n        <Badge color=\"info\" v-if=\"item?.target?.split?.('-')?.[1]\">{{\r\n          item?.target?.split?.(\"-\")?.[1] ?? \"\"\r\n        }}</Badge>\r\n      </div>\r\n    </template>\r\n    <template #keywordsValue=\"{ item }\">\r\n      <div\r\n        v-if=\"Array.isArray(item.keywords) && item.keywords.length > 0\"\r\n        class=\"d-flex flex-horizontal gap-2\"\r\n      >\r\n        <template v-for=\"keyword in item.keywords\" :key=\"keyword\">\r\n          <Badge color=\"warning\">{{ keyword }}</Badge>\r\n        </template>\r\n      </div>\r\n      <div v-else v-html=\"na()\"></div>\r\n    </template>\r\n    <template #actions=\"{ item }\">\r\n      <Button color=\"info\" class=\"text-light\" @click=\"edit(item)\">\r\n        <Icon :path=\"mdiPencil\" color=\"light\" />Edit\r\n      </Button>\r\n    </template>\r\n    <template #topActions>\r\n      <Button\r\n        ref=\"adder\"\r\n        v-if=\"target && (isEmpty || notAllInserted)\"\r\n        color=\"primary\"\r\n        class=\"text-light\"\r\n        @click=\"add\"\r\n      >\r\n        <Icon :path=\"mdiPlusThick\" color=\"light\" />Add Seo\r\n      </Button>\r\n    </template>\r\n  </Crud>\r\n  <ModalForm ref=\"modal\" name=\"SEO\" :model-class=\"Seo\" @save=\"save\">\r\n    <template #=\"{ model }\">\r\n      <div class=\"mb-3\">\r\n        <StringInput :field=\"model.title\" />\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <TextInput :field=\"model.description\" style=\"height: 200px\" />\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <TextInput :field=\"model.keywords\" style=\"height: 200px\" />\r\n      </div>\r\n    </template>\r\n  </ModalForm>\r\n</template>\r\n"],"names":["QueueIteration","count","__publicField","callback","eventName","data","event","execute","queueIteration","i","progress","current","percentage","createQueueIteration","classes","computed","cls","__props","fields","createFields","FieldType","crud","ref","modal","adder","isEmpty","Seo","Model","_a","setEmpty","value","add","_b","_e","_d","_c","item","langs","languages","queue","index","next","api","successToast","edit","record","save","model","done","params","notAllInserted"],"mappings":"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"}