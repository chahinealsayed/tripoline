{"version":3,"file":"strings.js","sources":["../../../../resources/js/lib/helper/numbers.ts","../../../../resources/js/lib/helper/strings.ts"],"sourcesContent":["export const random = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n","import { Color } from \"@/modules/bootstrap/types\";\r\nimport { random } from \"./numbers\";\r\n\r\nexport const autoId = (prefix: string = \"id\") => {\r\n  return `${prefix}-${random(1000, 9999)}-${random(100000, 999999)}-${random(\r\n    1000,\r\n    9999\r\n  )}-${random(1000000, 9999999)}-${random(1000, 9999)}-${random(\r\n    10000000,\r\n    99999999\r\n  )}`;\r\n};\r\n\r\nexport const capitalizeFirst = ([first, ...rest]: string, lowerRest = false) =>\r\n  first.toUpperCase() +\r\n  (lowerRest ? rest.join(\"\").toLowerCase() : rest.join(\"\"));\r\n\r\n/**\r\n * Slugify Text\r\n *\r\n * @param text\r\n * @param delimiter\r\n * @returns\r\n */\r\nexport const slugify = (text: string, delimiter: string = \"-\") => {\r\n  return text\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .replace(/\\s+/g, delimiter)\r\n    .replace(/[^\\w\\-]+/g, \"\")\r\n    .replace(/\\-\\-+/g, delimiter)\r\n    .replace(/^-+/, \"\")\r\n    .replace(/-+$/, \"\");\r\n};\r\n\r\n/**\r\n * Upper Case First Letter\r\n *\r\n * @param string\r\n * @returns\r\n */\r\nexport function ucFirst(string: string): string {\r\n  return string.replace(/^./, string[0].toUpperCase());\r\n}\r\n\r\n/**\r\n * Lower Case First Letter\r\n *\r\n * @param string\r\n * @returns\r\n */\r\nexport function lcFirst(string: string): string {\r\n  return string.replace(/^./, string[0].toLowerCase());\r\n}\r\n\r\n/**\r\n * Upper Case Text Words\r\n *\r\n * @param text\r\n * @returns\r\n */\r\nexport function ucWords(text: string): string {\r\n  return (text + \"\").replace(/^([a-z])|\\s+([a-z])/g, function ($1) {\r\n    return $1.toUpperCase();\r\n  });\r\n}\r\n\r\n/**\r\n * Lower Case Text Words\r\n *\r\n * @param text\r\n * @returns\r\n */\r\nexport function lcWords(text: string): string {\r\n  return (text + \"\").replace(/^([a-z])|\\s+([a-z])/g, function ($1) {\r\n    return $1.toLowerCase();\r\n  });\r\n}\r\n\r\nexport function createIds(prefix: string = \"id\") {\r\n  const date = new Date();\r\n  const time = date.getTime();\r\n  return `${prefix}-${time}-${random(1987, time)}-${random(2009, time)}`;\r\n}\r\n\r\nexport function nl2br(str: string, is_xhtml = false) {\r\n  if (typeof str === \"undefined\" || str === null) {\r\n    return \"\";\r\n  }\r\n  var breakTag =\r\n    is_xhtml || typeof is_xhtml === \"undefined\" ? \"<br />\" : \"<br>\";\r\n  return (str + \"\").replace(\r\n    /([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g,\r\n    \"$1\" + breakTag + \"$2\"\r\n  );\r\n}\r\n\r\nexport function formatBytes(bytes: number, decimals = 2) {\r\n  if (bytes === 0) return \"0 Bytes\";\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\r\n}\r\n\r\nexport const na = () => {\r\n  return `<span class=\"text-muted\" style=\"user-select: none;\">N/A</span>`;\r\n};\r\n\r\nexport function copyText(text: string): Promise<void> {\r\n  if (window.isSecureContext) {\r\n    return navigator.clipboard.writeText(dedent(text));\r\n  }\r\n  return new Promise<void>((_, reject) => {\r\n    reject();\r\n  });\r\n}\r\n\r\nexport function dedent(text: string) {\r\n  const format = (str: string) => {\r\n    const lines = str.split(\"\\n\");\r\n    let out = \"\";\r\n    lines.forEach((line) => {\r\n      out += `${line.trim().replace(/ +(?= )/g, \"\")}\\n`;\r\n    });\r\n    return out;\r\n  };\r\n\r\n  return format(text);\r\n}\r\n\r\nexport function kebabCase(str: string) {\r\n  return (\r\n    str &&\r\n    str\r\n      ?.match(\r\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\r\n      )\r\n      ?.map((x) => x.toLowerCase())\r\n      ?.join(\"-\")\r\n  );\r\n}\r\nexport function camelCase(str: string, delimiter: string = \"_\") {\r\n  return (\r\n    str &&\r\n    str\r\n      .split(delimiter)\r\n      .reduce(\r\n        (res, word, i) =>\r\n          i === 0\r\n            ? word.toLowerCase()\r\n            : `${res}${word.charAt(0).toUpperCase()}${word\r\n                .substring(1)\r\n                .toLowerCase()}`,\r\n        \"\"\r\n      )\r\n  );\r\n}\r\n\r\nexport function enumLabel(enumTxt: string) {\r\n  return enumTxt\r\n    .split(\"_\")\r\n    .map((txt) => ucFirst(txt))\r\n    .join(\" \");\r\n}\r\n\r\nexport function icon(options?: {\r\n  path: string;\r\n  size?: string | number;\r\n  viewBox?: string;\r\n  attrs?: { [name: string]: string };\r\n  color?: undefined | \"muted\" | Color;\r\n}) {\r\n  const { path, size, viewBox, attrs, color } = {\r\n    size: 24,\r\n    viewBox: \"0 0 24 24\",\r\n    attrs: {},\r\n    ...(options ?? {}),\r\n  };\r\n  const bind = Object.keys(attrs)\r\n    .map((name: string) => `${name}=\"${attrs[name]}\"`)\r\n    .join(\" \");\r\n  if (Object.hasOwn(attrs, \"style\") && attrs.style.includes(\"--r\")) {\r\n    attrs.style +=\r\n      \"transform: rotate(var(--r, 0deg)) scale(var(--sx, 1), var(--sy, 1));\";\r\n  }\r\n  return `\r\n\t<svg\r\n\t\twidth=\"${size}\"\r\n\t\theight=\"${size}\"\r\n\t\tviewBox=\"${viewBox}\"\r\n\t\tclass=\"${`${color ? \"text\" : \"default\"}-${color ?? \"color\"}`}\"\r\n\t\t${bind}\r\n\t>\r\n\t\t<path d=\"${path}\" style=\"fill: currentColor\" />\r\n\t</svg>\r\n\t`;\r\n}\r\n"],"names":["random","min","max","autoId","prefix","ucFirst","string","nl2br","str","is_xhtml","breakTag","na","icon","options","path","size","viewBox","attrs","color","bind","name"],"mappings":"AAAa,MAAAA,EAAS,CAACC,EAAaC,KAC5BD,EAAA,KAAK,KAAKA,CAAG,EACbC,EAAA,KAAK,MAAMA,CAAG,EACb,KAAK,MAAM,KAAK,OAAA,GAAYA,EAAMD,EAAM,GAAKA,CAAG,GCA5CE,EAAS,CAACC,EAAiB,OAC/B,GAAGA,CAAM,IAAIJ,EAAO,IAAM,IAAI,CAAC,IAAIA,EAAO,IAAQ,MAAM,CAAC,IAAIA,EAClE,IACA,IACD,CAAA,IAAIA,EAAO,IAAS,OAAO,CAAC,IAAIA,EAAO,IAAM,IAAI,CAAC,IAAIA,EACrD,IACA,QACD,CAAA,GAgCI,SAASK,EAAQC,EAAwB,CAC9C,OAAOA,EAAO,QAAQ,KAAMA,EAAO,CAAC,EAAE,aAAa,CACrD,CA0CgB,SAAAC,EAAMC,EAAaC,EAAW,GAAO,CACnD,GAAI,OAAOD,EAAQ,KAAeA,IAAQ,KACjC,MAAA,GAET,IAAIE,EACFD,GAAY,OAAOA,EAAa,IAAc,SAAW,OAC3D,OAAQD,EAAM,IAAI,QAChB,gCACA,KAAOE,EAAW,IAAA,CAEtB,CAcO,MAAMC,EAAK,IACT,iEA4DF,SAASC,EAAKC,EAMlB,CACD,KAAM,CAAE,KAAAC,EAAM,KAAAC,EAAM,QAAAC,EAAS,MAAAC,EAAO,MAAAC,GAAU,CAC5C,KAAM,GACN,QAAS,YACT,MAAO,CAAC,EACR,GAAIL,GAAW,CAAC,CAAA,EAEZM,EAAO,OAAO,KAAKF,CAAK,EAC3B,IAAKG,GAAiB,GAAGA,CAAI,KAAKH,EAAMG,CAAI,CAAC,GAAG,EAChD,KAAK,GAAG,EACP,OAAA,OAAO,OAAOH,EAAO,OAAO,GAAKA,EAAM,MAAM,SAAS,KAAK,IAC7DA,EAAM,OACJ,wEAEG;AAAA;AAAA,WAEEF,CAAI;AAAA,YACHA,CAAI;AAAA,aACHC,CAAO;AAAA,WACT,GAAGE,EAAQ,OAAS,SAAS,IAAIA,GAAS,OAAO,EAAE;AAAA,IAC1DC,CAAI;AAAA;AAAA,aAEKL,CAAI;AAAA;AAAA,EAGjB"}