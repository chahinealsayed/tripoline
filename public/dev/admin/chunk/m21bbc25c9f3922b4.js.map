{"version":3,"file":"m21bbc25c9f3922b4.js","sources":["../../../../node_modules/.pnpm/pinia@2.1.6_typescript@5.1.6_vue@3.3.4/node_modules/pinia/dist/pinia.mjs"],"sourcesContent":["/*!\n * pinia v2.1.6\n * (c) 2023 Eduardo San Martin Morote\n * @license MIT\n */\nimport { hasInjectionContext, inject, toRaw, watch, unref, markRaw, effectScope, ref, isVue2, isRef, isReactive, set, getCurrentScope, onScopeDispose, getCurrentInstance, reactive, toRef, del, nextTick, computed, toRefs } from 'vue-demi';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\n * setActivePinia must be called to handle SSR at the top of functions like\n * `fetch`, `setup`, `serverPrefetch` and others\n */\nlet activePinia;\n/**\n * Sets or unsets the active pinia. Used in SSR and internally when calling\n * actions and getters\n *\n * @param pinia - Pinia instance\n */\n// @ts-expect-error: cannot constrain the type of the return\nconst setActivePinia = (pinia) => (activePinia = pinia);\n/**\n * Get the currently active pinia if there is any.\n */\nconst getActivePinia = () => (hasInjectionContext() && inject(piniaSymbol)) || activePinia;\nconst piniaSymbol = ((process.env.NODE_ENV !== 'production') ? Symbol('pinia') : /* istanbul ignore next */ Symbol());\n\nfunction isPlainObject(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no) {\n    return (o &&\n        typeof o === 'object' &&\n        Object.prototype.toString.call(o) === '[object Object]' &&\n        typeof o.toJSON !== 'function');\n}\n// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }\n// TODO: can we change these to numbers?\n/**\n * Possible types for SubscriptionCallback\n */\nvar MutationType;\n(function (MutationType) {\n    /**\n     * Direct mutation of the state:\n     *\n     * - `store.name = 'new name'`\n     * - `store.$state.name = 'new name'`\n     * - `store.list.push('new item')`\n     */\n    MutationType[\"direct\"] = \"direct\";\n    /**\n     * Mutated the state with `$patch` and an object\n     *\n     * - `store.$patch({ name: 'newName' })`\n     */\n    MutationType[\"patchObject\"] = \"patch object\";\n    /**\n     * Mutated the state with `$patch` and a function\n     *\n     * - `store.$patch(state => state.name = 'newName')`\n     */\n    MutationType[\"patchFunction\"] = \"patch function\";\n    // maybe reset? for $state = {} and $reset\n})(MutationType || (MutationType = {}));\n\nconst IS_CLIENT = typeof window !== 'undefined';\n/**\n * Should we add the devtools plugins.\n * - only if dev mode or forced through the prod devtools flag\n * - not in test\n * - only if window exists (could change in the future)\n */\nconst USE_DEVTOOLS = ((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test') && IS_CLIENT;\n\n/*\n * FileSaver.js A saveAs() FileSaver implementation.\n *\n * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin\n * Morote.\n *\n * License : MIT\n */\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nconst _global = /*#__PURE__*/ (() => typeof window === 'object' && window.window === window\n    ? window\n    : typeof self === 'object' && self.self === self\n        ? self\n        : typeof global === 'object' && global.global === global\n            ? global\n            : typeof globalThis === 'object'\n                ? globalThis\n                : { HTMLElement: null })();\nfunction bom(blob, { autoBom = false } = {}) {\n    // prepend BOM for UTF-8 XML and text/* types (including HTML)\n    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n    if (autoBom &&\n        /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n        return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });\n    }\n    return blob;\n}\nfunction download(url, name, opts) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.responseType = 'blob';\n    xhr.onload = function () {\n        saveAs(xhr.response, name, opts);\n    };\n    xhr.onerror = function () {\n        console.error('could not download file');\n    };\n    xhr.send();\n}\nfunction corsEnabled(url) {\n    const xhr = new XMLHttpRequest();\n    // use sync to avoid popup blocker\n    xhr.open('HEAD', url, false);\n    try {\n        xhr.send();\n    }\n    catch (e) { }\n    return xhr.status >= 200 && xhr.status <= 299;\n}\n// `a.click()` doesn't work for all browsers (#465)\nfunction click(node) {\n    try {\n        node.dispatchEvent(new MouseEvent('click'));\n    }\n    catch (e) {\n        const evt = document.createEvent('MouseEvents');\n        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\n        node.dispatchEvent(evt);\n    }\n}\nconst _navigator = \n typeof navigator === 'object' ? navigator : { userAgent: '' };\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nconst isMacOSWebView = /*#__PURE__*/ (() => /Macintosh/.test(_navigator.userAgent) &&\n    /AppleWebKit/.test(_navigator.userAgent) &&\n    !/Safari/.test(_navigator.userAgent))();\nconst saveAs = !IS_CLIENT\n    ? () => { } // noop\n    : // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program\n        typeof HTMLAnchorElement !== 'undefined' &&\n            'download' in HTMLAnchorElement.prototype &&\n            !isMacOSWebView\n            ? downloadSaveAs\n            : // Use msSaveOrOpenBlob as a second approach\n                'msSaveOrOpenBlob' in _navigator\n                    ? msSaveAs\n                    : // Fallback to using FileReader and a popup\n                        fileSaverSaveAs;\nfunction downloadSaveAs(blob, name = 'download', opts) {\n    const a = document.createElement('a');\n    a.download = name;\n    a.rel = 'noopener'; // tabnabbing\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n    if (typeof blob === 'string') {\n        // Support regular links\n        a.href = blob;\n        if (a.origin !== location.origin) {\n            if (corsEnabled(a.href)) {\n                download(blob, name, opts);\n            }\n            else {\n                a.target = '_blank';\n                click(a);\n            }\n        }\n        else {\n            click(a);\n        }\n    }\n    else {\n        // Support blobs\n        a.href = URL.createObjectURL(blob);\n        setTimeout(function () {\n            URL.revokeObjectURL(a.href);\n        }, 4e4); // 40s\n        setTimeout(function () {\n            click(a);\n        }, 0);\n    }\n}\nfunction msSaveAs(blob, name = 'download', opts) {\n    if (typeof blob === 'string') {\n        if (corsEnabled(blob)) {\n            download(blob, name, opts);\n        }\n        else {\n            const a = document.createElement('a');\n            a.href = blob;\n            a.target = '_blank';\n            setTimeout(function () {\n                click(a);\n            });\n        }\n    }\n    else {\n        // @ts-ignore: works on windows\n        navigator.msSaveOrOpenBlob(bom(blob, opts), name);\n    }\n}\nfunction fileSaverSaveAs(blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank');\n    if (popup) {\n        popup.document.title = popup.document.body.innerText = 'downloading...';\n    }\n    if (typeof blob === 'string')\n        return download(blob, name, opts);\n    const force = blob.type === 'application/octet-stream';\n    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;\n    const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) &&\n        typeof FileReader !== 'undefined') {\n        // Safari doesn't allow downloading of blob URLs\n        const reader = new FileReader();\n        reader.onloadend = function () {\n            let url = reader.result;\n            if (typeof url !== 'string') {\n                popup = null;\n                throw new Error('Wrong reader.result type');\n            }\n            url = isChromeIOS\n                ? url\n                : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\n            if (popup) {\n                popup.location.href = url;\n            }\n            else {\n                location.assign(url);\n            }\n            popup = null; // reverse-tabnabbing #460\n        };\n        reader.readAsDataURL(blob);\n    }\n    else {\n        const url = URL.createObjectURL(blob);\n        if (popup)\n            popup.location.assign(url);\n        else\n            location.href = url;\n        popup = null; // reverse-tabnabbing #460\n        setTimeout(function () {\n            URL.revokeObjectURL(url);\n        }, 4e4); // 40s\n    }\n}\n\n/**\n * Shows a toast or console.log\n *\n * @param message - message to log\n * @param type - different color of the tooltip\n */\nfunction toastMessage(message, type) {\n    const piniaMessage = 'üçç ' + message;\n    if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {\n        // No longer available :(\n        __VUE_DEVTOOLS_TOAST__(piniaMessage, type);\n    }\n    else if (type === 'error') {\n        console.error(piniaMessage);\n    }\n    else if (type === 'warn') {\n        console.warn(piniaMessage);\n    }\n    else {\n        console.log(piniaMessage);\n    }\n}\nfunction isPinia(o) {\n    return '_a' in o && 'install' in o;\n}\n\n/**\n * This file contain devtools actions, they are not Pinia actions.\n */\n// ---\nfunction checkClipboardAccess() {\n    if (!('clipboard' in navigator)) {\n        toastMessage(`Your browser doesn't support the Clipboard API`, 'error');\n        return true;\n    }\n}\nfunction checkNotFocusedError(error) {\n    if (error instanceof Error &&\n        error.message.toLowerCase().includes('document is not focused')) {\n        toastMessage('You need to activate the \"Emulate a focused page\" setting in the \"Rendering\" panel of devtools.', 'warn');\n        return true;\n    }\n    return false;\n}\nasync function actionGlobalCopyState(pinia) {\n    if (checkClipboardAccess())\n        return;\n    try {\n        await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));\n        toastMessage('Global state copied to clipboard.');\n    }\n    catch (error) {\n        if (checkNotFocusedError(error))\n            return;\n        toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nasync function actionGlobalPasteState(pinia) {\n    if (checkClipboardAccess())\n        return;\n    try {\n        loadStoresState(pinia, JSON.parse(await navigator.clipboard.readText()));\n        toastMessage('Global state pasted from clipboard.');\n    }\n    catch (error) {\n        if (checkNotFocusedError(error))\n            return;\n        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nasync function actionGlobalSaveState(pinia) {\n    try {\n        saveAs(new Blob([JSON.stringify(pinia.state.value)], {\n            type: 'text/plain;charset=utf-8',\n        }), 'pinia-state.json');\n    }\n    catch (error) {\n        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nlet fileInput;\nfunction getFileOpener() {\n    if (!fileInput) {\n        fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.accept = '.json';\n    }\n    function openFile() {\n        return new Promise((resolve, reject) => {\n            fileInput.onchange = async () => {\n                const files = fileInput.files;\n                if (!files)\n                    return resolve(null);\n                const file = files.item(0);\n                if (!file)\n                    return resolve(null);\n                return resolve({ text: await file.text(), file });\n            };\n            // @ts-ignore: TODO: changed from 4.3 to 4.4\n            fileInput.oncancel = () => resolve(null);\n            fileInput.onerror = reject;\n            fileInput.click();\n        });\n    }\n    return openFile;\n}\nasync function actionGlobalOpenStateFile(pinia) {\n    try {\n        const open = getFileOpener();\n        const result = await open();\n        if (!result)\n            return;\n        const { text, file } = result;\n        loadStoresState(pinia, JSON.parse(text));\n        toastMessage(`Global state imported from \"${file.name}\".`);\n    }\n    catch (error) {\n        toastMessage(`Failed to import the state from JSON. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nfunction loadStoresState(pinia, state) {\n    for (const key in state) {\n        const storeState = pinia.state.value[key];\n        if (storeState) {\n            Object.assign(storeState, state[key]);\n        }\n    }\n}\n\nfunction formatDisplay(display) {\n    return {\n        _custom: {\n            display,\n        },\n    };\n}\nconst PINIA_ROOT_LABEL = 'üçç Pinia (root)';\nconst PINIA_ROOT_ID = '_root';\nfunction formatStoreForInspectorTree(store) {\n    return isPinia(store)\n        ? {\n            id: PINIA_ROOT_ID,\n            label: PINIA_ROOT_LABEL,\n        }\n        : {\n            id: store.$id,\n            label: store.$id,\n        };\n}\nfunction formatStoreForInspectorState(store) {\n    if (isPinia(store)) {\n        const storeNames = Array.from(store._s.keys());\n        const storeMap = store._s;\n        const state = {\n            state: storeNames.map((storeId) => ({\n                editable: true,\n                key: storeId,\n                value: store.state.value[storeId],\n            })),\n            getters: storeNames\n                .filter((id) => storeMap.get(id)._getters)\n                .map((id) => {\n                const store = storeMap.get(id);\n                return {\n                    editable: false,\n                    key: id,\n                    value: store._getters.reduce((getters, key) => {\n                        getters[key] = store[key];\n                        return getters;\n                    }, {}),\n                };\n            }),\n        };\n        return state;\n    }\n    const state = {\n        state: Object.keys(store.$state).map((key) => ({\n            editable: true,\n            key,\n            value: store.$state[key],\n        })),\n    };\n    // avoid adding empty getters\n    if (store._getters && store._getters.length) {\n        state.getters = store._getters.map((getterName) => ({\n            editable: false,\n            key: getterName,\n            value: store[getterName],\n        }));\n    }\n    if (store._customProperties.size) {\n        state.customProperties = Array.from(store._customProperties).map((key) => ({\n            editable: true,\n            key,\n            value: store[key],\n        }));\n    }\n    return state;\n}\nfunction formatEventData(events) {\n    if (!events)\n        return {};\n    if (Array.isArray(events)) {\n        // TODO: handle add and delete for arrays and objects\n        return events.reduce((data, event) => {\n            data.keys.push(event.key);\n            data.operations.push(event.type);\n            data.oldValue[event.key] = event.oldValue;\n            data.newValue[event.key] = event.newValue;\n            return data;\n        }, {\n            oldValue: {},\n            keys: [],\n            operations: [],\n            newValue: {},\n        });\n    }\n    else {\n        return {\n            operation: formatDisplay(events.type),\n            key: formatDisplay(events.key),\n            oldValue: events.oldValue,\n            newValue: events.newValue,\n        };\n    }\n}\nfunction formatMutationType(type) {\n    switch (type) {\n        case MutationType.direct:\n            return 'mutation';\n        case MutationType.patchFunction:\n            return '$patch';\n        case MutationType.patchObject:\n            return '$patch';\n        default:\n            return 'unknown';\n    }\n}\n\n// timeline can be paused when directly changing the state\nlet isTimelineActive = true;\nconst componentStateTypes = [];\nconst MUTATIONS_LAYER_ID = 'pinia:mutations';\nconst INSPECTOR_ID = 'pinia';\nconst { assign: assign$1 } = Object;\n/**\n * Gets the displayed name of a store in devtools\n *\n * @param id - id of the store\n * @returns a formatted string\n */\nconst getStoreType = (id) => 'üçç ' + id;\n/**\n * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab\n * as soon as it is added to the application.\n *\n * @param app - Vue application\n * @param pinia - pinia instance\n */\nfunction registerPiniaDevtools(app, pinia) {\n    setupDevtoolsPlugin({\n        id: 'dev.esm.pinia',\n        label: 'Pinia üçç',\n        logo: 'https://pinia.vuejs.org/logo.svg',\n        packageName: 'pinia',\n        homepage: 'https://pinia.vuejs.org',\n        componentStateTypes,\n        app,\n    }, (api) => {\n        if (typeof api.now !== 'function') {\n            toastMessage('You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');\n        }\n        api.addTimelineLayer({\n            id: MUTATIONS_LAYER_ID,\n            label: `Pinia üçç`,\n            color: 0xe5df88,\n        });\n        api.addInspector({\n            id: INSPECTOR_ID,\n            label: 'Pinia üçç',\n            icon: 'storage',\n            treeFilterPlaceholder: 'Search stores',\n            actions: [\n                {\n                    icon: 'content_copy',\n                    action: () => {\n                        actionGlobalCopyState(pinia);\n                    },\n                    tooltip: 'Serialize and copy the state',\n                },\n                {\n                    icon: 'content_paste',\n                    action: async () => {\n                        await actionGlobalPasteState(pinia);\n                        api.sendInspectorTree(INSPECTOR_ID);\n                        api.sendInspectorState(INSPECTOR_ID);\n                    },\n                    tooltip: 'Replace the state with the content of your clipboard',\n                },\n                {\n                    icon: 'save',\n                    action: () => {\n                        actionGlobalSaveState(pinia);\n                    },\n                    tooltip: 'Save the state as a JSON file',\n                },\n                {\n                    icon: 'folder_open',\n                    action: async () => {\n                        await actionGlobalOpenStateFile(pinia);\n                        api.sendInspectorTree(INSPECTOR_ID);\n                        api.sendInspectorState(INSPECTOR_ID);\n                    },\n                    tooltip: 'Import the state from a JSON file',\n                },\n            ],\n            nodeActions: [\n                {\n                    icon: 'restore',\n                    tooltip: 'Reset the state (with \"$reset\")',\n                    action: (nodeId) => {\n                        const store = pinia._s.get(nodeId);\n                        if (!store) {\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it wasn't found.`, 'warn');\n                        }\n                        else if (typeof store.$reset !== 'function') {\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it doesn't have a \"$reset\" method implemented.`, 'warn');\n                        }\n                        else {\n                            store.$reset();\n                            toastMessage(`Store \"${nodeId}\" reset.`);\n                        }\n                    },\n                },\n            ],\n        });\n        api.on.inspectComponent((payload, ctx) => {\n            const proxy = (payload.componentInstance &&\n                payload.componentInstance.proxy);\n            if (proxy && proxy._pStores) {\n                const piniaStores = payload.componentInstance.proxy._pStores;\n                Object.values(piniaStores).forEach((store) => {\n                    payload.instanceData.state.push({\n                        type: getStoreType(store.$id),\n                        key: 'state',\n                        editable: true,\n                        value: store._isOptionsAPI\n                            ? {\n                                _custom: {\n                                    value: toRaw(store.$state),\n                                    actions: [\n                                        {\n                                            icon: 'restore',\n                                            tooltip: 'Reset the state of this store',\n                                            action: () => store.$reset(),\n                                        },\n                                    ],\n                                },\n                            }\n                            : // NOTE: workaround to unwrap transferred refs\n                                Object.keys(store.$state).reduce((state, key) => {\n                                    state[key] = store.$state[key];\n                                    return state;\n                                }, {}),\n                    });\n                    if (store._getters && store._getters.length) {\n                        payload.instanceData.state.push({\n                            type: getStoreType(store.$id),\n                            key: 'getters',\n                            editable: false,\n                            value: store._getters.reduce((getters, key) => {\n                                try {\n                                    getters[key] = store[key];\n                                }\n                                catch (error) {\n                                    // @ts-expect-error: we just want to show it in devtools\n                                    getters[key] = error;\n                                }\n                                return getters;\n                            }, {}),\n                        });\n                    }\n                });\n            }\n        });\n        api.on.getInspectorTree((payload) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                let stores = [pinia];\n                stores = stores.concat(Array.from(pinia._s.values()));\n                payload.rootNodes = (payload.filter\n                    ? stores.filter((store) => '$id' in store\n                        ? store.$id\n                            .toLowerCase()\n                            .includes(payload.filter.toLowerCase())\n                        : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase()))\n                    : stores).map(formatStoreForInspectorTree);\n            }\n        });\n        api.on.getInspectorState((payload) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\n                    ? pinia\n                    : pinia._s.get(payload.nodeId);\n                if (!inspectedStore) {\n                    // this could be the selected store restored for a different project\n                    // so it's better not to say anything here\n                    return;\n                }\n                if (inspectedStore) {\n                    payload.state = formatStoreForInspectorState(inspectedStore);\n                }\n            }\n        });\n        api.on.editInspectorState((payload, ctx) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\n                    ? pinia\n                    : pinia._s.get(payload.nodeId);\n                if (!inspectedStore) {\n                    return toastMessage(`store \"${payload.nodeId}\" not found`, 'error');\n                }\n                const { path } = payload;\n                if (!isPinia(inspectedStore)) {\n                    // access only the state\n                    if (path.length !== 1 ||\n                        !inspectedStore._customProperties.has(path[0]) ||\n                        path[0] in inspectedStore.$state) {\n                        path.unshift('$state');\n                    }\n                }\n                else {\n                    // Root access, we can omit the `.value` because the devtools API does it for us\n                    path.unshift('state');\n                }\n                isTimelineActive = false;\n                payload.set(inspectedStore, path, payload.state.value);\n                isTimelineActive = true;\n            }\n        });\n        api.on.editComponentState((payload) => {\n            if (payload.type.startsWith('üçç')) {\n                const storeId = payload.type.replace(/^üçç\\s*/, '');\n                const store = pinia._s.get(storeId);\n                if (!store) {\n                    return toastMessage(`store \"${storeId}\" not found`, 'error');\n                }\n                const { path } = payload;\n                if (path[0] !== 'state') {\n                    return toastMessage(`Invalid path for store \"${storeId}\":\\n${path}\\nOnly state can be modified.`);\n                }\n                // rewrite the first entry to be able to directly set the state as\n                // well as any other path\n                path[0] = '$state';\n                isTimelineActive = false;\n                payload.set(store, path, payload.state.value);\n                isTimelineActive = true;\n            }\n        });\n    });\n}\nfunction addStoreToDevtools(app, store) {\n    if (!componentStateTypes.includes(getStoreType(store.$id))) {\n        componentStateTypes.push(getStoreType(store.$id));\n    }\n    setupDevtoolsPlugin({\n        id: 'dev.esm.pinia',\n        label: 'Pinia üçç',\n        logo: 'https://pinia.vuejs.org/logo.svg',\n        packageName: 'pinia',\n        homepage: 'https://pinia.vuejs.org',\n        componentStateTypes,\n        app,\n        settings: {\n            logStoreChanges: {\n                label: 'Notify about new/deleted stores',\n                type: 'boolean',\n                defaultValue: true,\n            },\n            // useEmojis: {\n            //   label: 'Use emojis in messages ‚ö°Ô∏è',\n            //   type: 'boolean',\n            //   defaultValue: true,\n            // },\n        },\n    }, (api) => {\n        // gracefully handle errors\n        const now = typeof api.now === 'function' ? api.now.bind(api) : Date.now;\n        store.$onAction(({ after, onError, name, args }) => {\n            const groupId = runningActionId++;\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: {\n                    time: now(),\n                    title: 'üõ´ ' + name,\n                    subtitle: 'start',\n                    data: {\n                        store: formatDisplay(store.$id),\n                        action: formatDisplay(name),\n                        args,\n                    },\n                    groupId,\n                },\n            });\n            after((result) => {\n                activeAction = undefined;\n                api.addTimelineEvent({\n                    layerId: MUTATIONS_LAYER_ID,\n                    event: {\n                        time: now(),\n                        title: 'üõ¨ ' + name,\n                        subtitle: 'end',\n                        data: {\n                            store: formatDisplay(store.$id),\n                            action: formatDisplay(name),\n                            args,\n                            result,\n                        },\n                        groupId,\n                    },\n                });\n            });\n            onError((error) => {\n                activeAction = undefined;\n                api.addTimelineEvent({\n                    layerId: MUTATIONS_LAYER_ID,\n                    event: {\n                        time: now(),\n                        logType: 'error',\n                        title: 'üí• ' + name,\n                        subtitle: 'end',\n                        data: {\n                            store: formatDisplay(store.$id),\n                            action: formatDisplay(name),\n                            args,\n                            error,\n                        },\n                        groupId,\n                    },\n                });\n            });\n        }, true);\n        store._customProperties.forEach((name) => {\n            watch(() => unref(store[name]), (newValue, oldValue) => {\n                api.notifyComponentUpdate();\n                api.sendInspectorState(INSPECTOR_ID);\n                if (isTimelineActive) {\n                    api.addTimelineEvent({\n                        layerId: MUTATIONS_LAYER_ID,\n                        event: {\n                            time: now(),\n                            title: 'Change',\n                            subtitle: name,\n                            data: {\n                                newValue,\n                                oldValue,\n                            },\n                            groupId: activeAction,\n                        },\n                    });\n                }\n            }, { deep: true });\n        });\n        store.$subscribe(({ events, type }, state) => {\n            api.notifyComponentUpdate();\n            api.sendInspectorState(INSPECTOR_ID);\n            if (!isTimelineActive)\n                return;\n            // rootStore.state[store.id] = state\n            const eventData = {\n                time: now(),\n                title: formatMutationType(type),\n                data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),\n                groupId: activeAction,\n            };\n            if (type === MutationType.patchFunction) {\n                eventData.subtitle = '‚§µÔ∏è';\n            }\n            else if (type === MutationType.patchObject) {\n                eventData.subtitle = 'üß©';\n            }\n            else if (events && !Array.isArray(events)) {\n                eventData.subtitle = events.type;\n            }\n            if (events) {\n                eventData.data['rawEvent(s)'] = {\n                    _custom: {\n                        display: 'DebuggerEvent',\n                        type: 'object',\n                        tooltip: 'raw DebuggerEvent[]',\n                        value: events,\n                    },\n                };\n            }\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: eventData,\n            });\n        }, { detached: true, flush: 'sync' });\n        const hotUpdate = store._hotUpdate;\n        store._hotUpdate = markRaw((newStore) => {\n            hotUpdate(newStore);\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: {\n                    time: now(),\n                    title: 'üî• ' + store.$id,\n                    subtitle: 'HMR update',\n                    data: {\n                        store: formatDisplay(store.$id),\n                        info: formatDisplay(`HMR update`),\n                    },\n                },\n            });\n            // update the devtools too\n            api.notifyComponentUpdate();\n            api.sendInspectorTree(INSPECTOR_ID);\n            api.sendInspectorState(INSPECTOR_ID);\n        });\n        const { $dispose } = store;\n        store.$dispose = () => {\n            $dispose();\n            api.notifyComponentUpdate();\n            api.sendInspectorTree(INSPECTOR_ID);\n            api.sendInspectorState(INSPECTOR_ID);\n            api.getSettings().logStoreChanges &&\n                toastMessage(`Disposed \"${store.$id}\" store üóë`);\n        };\n        // trigger an update so it can display new registered stores\n        api.notifyComponentUpdate();\n        api.sendInspectorTree(INSPECTOR_ID);\n        api.sendInspectorState(INSPECTOR_ID);\n        api.getSettings().logStoreChanges &&\n            toastMessage(`\"${store.$id}\" store installed üÜï`);\n    });\n}\nlet runningActionId = 0;\nlet activeAction;\n/**\n * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the\n * context of all actions, allowing us to set `runningAction` on each access and effectively associating any state\n * mutation to the action.\n *\n * @param store - store to patch\n * @param actionNames - list of actionst to patch\n */\nfunction patchActionForGrouping(store, actionNames, wrapWithProxy) {\n    // original actions of the store as they are given by pinia. We are going to override them\n    const actions = actionNames.reduce((storeActions, actionName) => {\n        // use toRaw to avoid tracking #541\n        storeActions[actionName] = toRaw(store)[actionName];\n        return storeActions;\n    }, {});\n    for (const actionName in actions) {\n        store[actionName] = function () {\n            // the running action id is incremented in a before action hook\n            const _actionId = runningActionId;\n            const trackedStore = wrapWithProxy\n                ? new Proxy(store, {\n                    get(...args) {\n                        activeAction = _actionId;\n                        return Reflect.get(...args);\n                    },\n                    set(...args) {\n                        activeAction = _actionId;\n                        return Reflect.set(...args);\n                    },\n                })\n                : store;\n            // For Setup Stores we need https://github.com/tc39/proposal-async-context\n            activeAction = _actionId;\n            const retValue = actions[actionName].apply(trackedStore, arguments);\n            // this is safer as async actions in Setup Stores would associate mutations done outside of the action\n            activeAction = undefined;\n            return retValue;\n        };\n    }\n}\n/**\n * pinia.use(devtoolsPlugin)\n */\nfunction devtoolsPlugin({ app, store, options }) {\n    // HMR module\n    if (store.$id.startsWith('__hot:')) {\n        return;\n    }\n    // detect option api vs setup api\n    store._isOptionsAPI = !!options.state;\n    patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);\n    // Upgrade the HMR to also update the new actions\n    const originalHotUpdate = store._hotUpdate;\n    toRaw(store)._hotUpdate = function (newStore) {\n        originalHotUpdate.apply(this, arguments);\n        patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);\n    };\n    addStoreToDevtools(app, \n    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?\n    store);\n}\n\n/**\n * Creates a Pinia instance to be used by the application\n */\nfunction createPinia() {\n    const scope = effectScope(true);\n    // NOTE: here we could check the window object for a state and directly set it\n    // if there is anything like it with Vue 3 SSR\n    const state = scope.run(() => ref({}));\n    let _p = [];\n    // plugins added before calling app.use(pinia)\n    let toBeInstalled = [];\n    const pinia = markRaw({\n        install(app) {\n            // this allows calling useStore() outside of a component setup after\n            // installing pinia's plugin\n            setActivePinia(pinia);\n            if (!isVue2) {\n                pinia._a = app;\n                app.provide(piniaSymbol, pinia);\n                app.config.globalProperties.$pinia = pinia;\n                /* istanbul ignore else */\n                if (USE_DEVTOOLS) {\n                    registerPiniaDevtools(app, pinia);\n                }\n                toBeInstalled.forEach((plugin) => _p.push(plugin));\n                toBeInstalled = [];\n            }\n        },\n        use(plugin) {\n            if (!this._a && !isVue2) {\n                toBeInstalled.push(plugin);\n            }\n            else {\n                _p.push(plugin);\n            }\n            return this;\n        },\n        _p,\n        // it's actually undefined here\n        // @ts-expect-error\n        _a: null,\n        _e: scope,\n        _s: new Map(),\n        state,\n    });\n    // pinia devtools rely on dev only features so they cannot be forced unless\n    // the dev build of Vue is used. Avoid old browsers like IE11.\n    if (USE_DEVTOOLS && typeof Proxy !== 'undefined') {\n        pinia.use(devtoolsPlugin);\n    }\n    return pinia;\n}\n\n/**\n * Checks if a function is a `StoreDefinition`.\n *\n * @param fn - object to test\n * @returns true if `fn` is a StoreDefinition\n */\nconst isUseStore = (fn) => {\n    return typeof fn === 'function' && typeof fn.$id === 'string';\n};\n/**\n * Mutates in place `newState` with `oldState` to _hot update_ it. It will\n * remove any key not existing in `newState` and recursively merge plain\n * objects.\n *\n * @param newState - new state object to be patched\n * @param oldState - old state that should be used to patch newState\n * @returns - newState\n */\nfunction patchObject(newState, oldState) {\n    // no need to go through symbols because they cannot be serialized anyway\n    for (const key in oldState) {\n        const subPatch = oldState[key];\n        // skip the whole sub tree\n        if (!(key in newState)) {\n            continue;\n        }\n        const targetValue = newState[key];\n        if (isPlainObject(targetValue) &&\n            isPlainObject(subPatch) &&\n            !isRef(subPatch) &&\n            !isReactive(subPatch)) {\n            newState[key] = patchObject(targetValue, subPatch);\n        }\n        else {\n            // objects are either a bit more complex (e.g. refs) or primitives, so we\n            // just set the whole thing\n            if (isVue2) {\n                set(newState, key, subPatch);\n            }\n            else {\n                newState[key] = subPatch;\n            }\n        }\n    }\n    return newState;\n}\n/**\n * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.\n *\n * @example\n * ```js\n * const useUser = defineStore(...)\n * if (import.meta.hot) {\n *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))\n * }\n * ```\n *\n * @param initialUseStore - return of the defineStore to hot update\n * @param hot - `import.meta.hot`\n */\nfunction acceptHMRUpdate(initialUseStore, hot) {\n    // strip as much as possible from iife.prod\n    if (!(process.env.NODE_ENV !== 'production')) {\n        return () => { };\n    }\n    return (newModule) => {\n        const pinia = hot.data.pinia || initialUseStore._pinia;\n        if (!pinia) {\n            // this store is still not used\n            return;\n        }\n        // preserve the pinia instance across loads\n        hot.data.pinia = pinia;\n        // console.log('got data', newStore)\n        for (const exportName in newModule) {\n            const useStore = newModule[exportName];\n            // console.log('checking for', exportName)\n            if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {\n                // console.log('Accepting update for', useStore.$id)\n                const id = useStore.$id;\n                if (id !== initialUseStore.$id) {\n                    console.warn(`The id of the store changed from \"${initialUseStore.$id}\" to \"${id}\". Reloading.`);\n                    // return import.meta.hot.invalidate()\n                    return hot.invalidate();\n                }\n                const existingStore = pinia._s.get(id);\n                if (!existingStore) {\n                    console.log(`[Pinia]: skipping hmr because store doesn't exist yet`);\n                    return;\n                }\n                useStore(pinia, existingStore);\n            }\n        }\n    };\n}\n\nconst noop = () => { };\nfunction addSubscription(subscriptions, callback, detached, onCleanup = noop) {\n    subscriptions.push(callback);\n    const removeSubscription = () => {\n        const idx = subscriptions.indexOf(callback);\n        if (idx > -1) {\n            subscriptions.splice(idx, 1);\n            onCleanup();\n        }\n    };\n    if (!detached && getCurrentScope()) {\n        onScopeDispose(removeSubscription);\n    }\n    return removeSubscription;\n}\nfunction triggerSubscriptions(subscriptions, ...args) {\n    subscriptions.slice().forEach((callback) => {\n        callback(...args);\n    });\n}\n\nconst fallbackRunWithContext = (fn) => fn();\nfunction mergeReactiveObjects(target, patchToApply) {\n    // Handle Map instances\n    if (target instanceof Map && patchToApply instanceof Map) {\n        patchToApply.forEach((value, key) => target.set(key, value));\n    }\n    // Handle Set instances\n    if (target instanceof Set && patchToApply instanceof Set) {\n        patchToApply.forEach(target.add, target);\n    }\n    // no need to go through symbols because they cannot be serialized anyway\n    for (const key in patchToApply) {\n        if (!patchToApply.hasOwnProperty(key))\n            continue;\n        const subPatch = patchToApply[key];\n        const targetValue = target[key];\n        if (isPlainObject(targetValue) &&\n            isPlainObject(subPatch) &&\n            target.hasOwnProperty(key) &&\n            !isRef(subPatch) &&\n            !isReactive(subPatch)) {\n            // NOTE: here I wanted to warn about inconsistent types but it's not possible because in setup stores one might\n            // start the value of a property as a certain type e.g. a Map, and then for some reason, during SSR, change that\n            // to `undefined`. When trying to hydrate, we want to override the Map with `undefined`.\n            target[key] = mergeReactiveObjects(targetValue, subPatch);\n        }\n        else {\n            // @ts-expect-error: subPatch is a valid value\n            target[key] = subPatch;\n        }\n    }\n    return target;\n}\nconst skipHydrateSymbol = (process.env.NODE_ENV !== 'production')\n    ? Symbol('pinia:skipHydration')\n    : /* istanbul ignore next */ Symbol();\nconst skipHydrateMap = /*#__PURE__*/ new WeakMap();\n/**\n * Tells Pinia to skip the hydration process of a given object. This is useful in setup stores (only) when you return a\n * stateful object in the store but it isn't really state. e.g. returning a router instance in a setup store.\n *\n * @param obj - target object\n * @returns obj\n */\nfunction skipHydrate(obj) {\n    return isVue2\n        ? // in @vue/composition-api, the refs are sealed so defineProperty doesn't work...\n            /* istanbul ignore next */ skipHydrateMap.set(obj, 1) && obj\n        : Object.defineProperty(obj, skipHydrateSymbol, {});\n}\n/**\n * Returns whether a value should be hydrated\n *\n * @param obj - target variable\n * @returns true if `obj` should be hydrated\n */\nfunction shouldHydrate(obj) {\n    return isVue2\n        ? /* istanbul ignore next */ !skipHydrateMap.has(obj)\n        : !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);\n}\nconst { assign } = Object;\nfunction isComputed(o) {\n    return !!(isRef(o) && o.effect);\n}\nfunction createOptionsStore(id, options, pinia, hot) {\n    const { state, actions, getters } = options;\n    const initialState = pinia.state.value[id];\n    let store;\n    function setup() {\n        if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n            /* istanbul ignore if */\n            if (isVue2) {\n                set(pinia.state.value, id, state ? state() : {});\n            }\n            else {\n                pinia.state.value[id] = state ? state() : {};\n            }\n        }\n        // avoid creating a state in pinia.state.value\n        const localState = (process.env.NODE_ENV !== 'production') && hot\n            ? // use ref() to unwrap refs inside state TODO: check if this is still necessary\n                toRefs(ref(state ? state() : {}).value)\n            : toRefs(pinia.state.value[id]);\n        return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {\n            if ((process.env.NODE_ENV !== 'production') && name in localState) {\n                console.warn(`[üçç]: A getter cannot have the same name as another state property. Rename one of them. Found with \"${name}\" in store \"${id}\".`);\n            }\n            computedGetters[name] = markRaw(computed(() => {\n                setActivePinia(pinia);\n                // it was created just before\n                const store = pinia._s.get(id);\n                // allow cross using stores\n                /* istanbul ignore next */\n                if (isVue2 && !store._r)\n                    return;\n                // @ts-expect-error\n                // return getters![name].call(context, context)\n                // TODO: avoid reading the getter while assigning with a global variable\n                return getters[name].call(store, store);\n            }));\n            return computedGetters;\n        }, {}));\n    }\n    store = createSetupStore(id, setup, options, pinia, hot, true);\n    return store;\n}\nfunction createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {\n    let scope;\n    const optionsForPlugin = assign({ actions: {} }, options);\n    /* istanbul ignore if */\n    if ((process.env.NODE_ENV !== 'production') && !pinia._e.active) {\n        throw new Error('Pinia destroyed');\n    }\n    // watcher options for $subscribe\n    const $subscribeOptions = {\n        deep: true,\n        // flush: 'post',\n    };\n    /* istanbul ignore else */\n    if ((process.env.NODE_ENV !== 'production') && !isVue2) {\n        $subscribeOptions.onTrigger = (event) => {\n            /* istanbul ignore else */\n            if (isListening) {\n                debuggerEvents = event;\n                // avoid triggering this while the store is being built and the state is being set in pinia\n            }\n            else if (isListening == false && !store._hotUpdating) {\n                // let patch send all the events together later\n                /* istanbul ignore else */\n                if (Array.isArray(debuggerEvents)) {\n                    debuggerEvents.push(event);\n                }\n                else {\n                    console.error('üçç debuggerEvents should be an array. This is most likely an internal Pinia bug.');\n                }\n            }\n        };\n    }\n    // internal state\n    let isListening; // set to true at the end\n    let isSyncListening; // set to true at the end\n    let subscriptions = [];\n    let actionSubscriptions = [];\n    let debuggerEvents;\n    const initialState = pinia.state.value[$id];\n    // avoid setting the state for option stores if it is set\n    // by the setup\n    if (!isOptionsStore && !initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n        /* istanbul ignore if */\n        if (isVue2) {\n            set(pinia.state.value, $id, {});\n        }\n        else {\n            pinia.state.value[$id] = {};\n        }\n    }\n    const hotState = ref({});\n    // avoid triggering too many listeners\n    // https://github.com/vuejs/pinia/issues/1129\n    let activeListener;\n    function $patch(partialStateOrMutator) {\n        let subscriptionMutation;\n        isListening = isSyncListening = false;\n        // reset the debugger events since patches are sync\n        /* istanbul ignore else */\n        if ((process.env.NODE_ENV !== 'production')) {\n            debuggerEvents = [];\n        }\n        if (typeof partialStateOrMutator === 'function') {\n            partialStateOrMutator(pinia.state.value[$id]);\n            subscriptionMutation = {\n                type: MutationType.patchFunction,\n                storeId: $id,\n                events: debuggerEvents,\n            };\n        }\n        else {\n            mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);\n            subscriptionMutation = {\n                type: MutationType.patchObject,\n                payload: partialStateOrMutator,\n                storeId: $id,\n                events: debuggerEvents,\n            };\n        }\n        const myListenerId = (activeListener = Symbol());\n        nextTick().then(() => {\n            if (activeListener === myListenerId) {\n                isListening = true;\n            }\n        });\n        isSyncListening = true;\n        // because we paused the watcher, we need to manually call the subscriptions\n        triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);\n    }\n    const $reset = isOptionsStore\n        ? function $reset() {\n            const { state } = options;\n            const newState = state ? state() : {};\n            // we use a patch to group all changes into one single subscription\n            this.$patch(($state) => {\n                assign($state, newState);\n            });\n        }\n        : /* istanbul ignore next */\n            (process.env.NODE_ENV !== 'production')\n                ? () => {\n                    throw new Error(`üçç: Store \"${$id}\" is built using the setup syntax and does not implement $reset().`);\n                }\n                : noop;\n    function $dispose() {\n        scope.stop();\n        subscriptions = [];\n        actionSubscriptions = [];\n        pinia._s.delete($id);\n    }\n    /**\n     * Wraps an action to handle subscriptions.\n     *\n     * @param name - name of the action\n     * @param action - action to wrap\n     * @returns a wrapped action to handle subscriptions\n     */\n    function wrapAction(name, action) {\n        return function () {\n            setActivePinia(pinia);\n            const args = Array.from(arguments);\n            const afterCallbackList = [];\n            const onErrorCallbackList = [];\n            function after(callback) {\n                afterCallbackList.push(callback);\n            }\n            function onError(callback) {\n                onErrorCallbackList.push(callback);\n            }\n            // @ts-expect-error\n            triggerSubscriptions(actionSubscriptions, {\n                args,\n                name,\n                store,\n                after,\n                onError,\n            });\n            let ret;\n            try {\n                ret = action.apply(this && this.$id === $id ? this : store, args);\n                // handle sync errors\n            }\n            catch (error) {\n                triggerSubscriptions(onErrorCallbackList, error);\n                throw error;\n            }\n            if (ret instanceof Promise) {\n                return ret\n                    .then((value) => {\n                    triggerSubscriptions(afterCallbackList, value);\n                    return value;\n                })\n                    .catch((error) => {\n                    triggerSubscriptions(onErrorCallbackList, error);\n                    return Promise.reject(error);\n                });\n            }\n            // trigger after callbacks\n            triggerSubscriptions(afterCallbackList, ret);\n            return ret;\n        };\n    }\n    const _hmrPayload = /*#__PURE__*/ markRaw({\n        actions: {},\n        getters: {},\n        state: [],\n        hotState,\n    });\n    const partialStore = {\n        _p: pinia,\n        // _s: scope,\n        $id,\n        $onAction: addSubscription.bind(null, actionSubscriptions),\n        $patch,\n        $reset,\n        $subscribe(callback, options = {}) {\n            const removeSubscription = addSubscription(subscriptions, callback, options.detached, () => stopWatcher());\n            const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state) => {\n                if (options.flush === 'sync' ? isSyncListening : isListening) {\n                    callback({\n                        storeId: $id,\n                        type: MutationType.direct,\n                        events: debuggerEvents,\n                    }, state);\n                }\n            }, assign({}, $subscribeOptions, options)));\n            return removeSubscription;\n        },\n        $dispose,\n    };\n    /* istanbul ignore if */\n    if (isVue2) {\n        // start as non ready\n        partialStore._r = false;\n    }\n    const store = reactive((process.env.NODE_ENV !== 'production') || USE_DEVTOOLS\n        ? assign({\n            _hmrPayload,\n            _customProperties: markRaw(new Set()), // devtools custom properties\n        }, partialStore\n        // must be added later\n        // setupStore\n        )\n        : partialStore);\n    // store the partial store now so the setup of stores can instantiate each other before they are finished without\n    // creating infinite loops.\n    pinia._s.set($id, store);\n    const runWithContext = (pinia._a && pinia._a.runWithContext) || fallbackRunWithContext;\n    // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped\n    const setupStore = pinia._e.run(() => {\n        scope = effectScope();\n        return runWithContext(() => scope.run(setup));\n    });\n    // overwrite existing actions to support $onAction\n    for (const key in setupStore) {\n        const prop = setupStore[key];\n        if ((isRef(prop) && !isComputed(prop)) || isReactive(prop)) {\n            // mark it as a piece of state to be serialized\n            if ((process.env.NODE_ENV !== 'production') && hot) {\n                set(hotState.value, key, toRef(setupStore, key));\n                // createOptionStore directly sets the state in pinia.state.value so we\n                // can just skip that\n            }\n            else if (!isOptionsStore) {\n                // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created\n                if (initialState && shouldHydrate(prop)) {\n                    if (isRef(prop)) {\n                        prop.value = initialState[key];\n                    }\n                    else {\n                        // probably a reactive object, lets recursively assign\n                        // @ts-expect-error: prop is unknown\n                        mergeReactiveObjects(prop, initialState[key]);\n                    }\n                }\n                // transfer the ref to the pinia state to keep everything in sync\n                /* istanbul ignore if */\n                if (isVue2) {\n                    set(pinia.state.value[$id], key, prop);\n                }\n                else {\n                    pinia.state.value[$id][key] = prop;\n                }\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                _hmrPayload.state.push(key);\n            }\n            // action\n        }\n        else if (typeof prop === 'function') {\n            // @ts-expect-error: we are overriding the function we avoid wrapping if\n            const actionValue = (process.env.NODE_ENV !== 'production') && hot ? prop : wrapAction(key, prop);\n            // this a hot module replacement store because the hotUpdate method needs\n            // to do it with the right context\n            /* istanbul ignore if */\n            if (isVue2) {\n                set(setupStore, key, actionValue);\n            }\n            else {\n                // @ts-expect-error\n                setupStore[key] = actionValue;\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                _hmrPayload.actions[key] = prop;\n            }\n            // list actions so they can be used in plugins\n            // @ts-expect-error\n            optionsForPlugin.actions[key] = prop;\n        }\n        else if ((process.env.NODE_ENV !== 'production')) {\n            // add getters for devtools\n            if (isComputed(prop)) {\n                _hmrPayload.getters[key] = isOptionsStore\n                    ? // @ts-expect-error\n                        options.getters[key]\n                    : prop;\n                if (IS_CLIENT) {\n                    const getters = setupStore._getters ||\n                        // @ts-expect-error: same\n                        (setupStore._getters = markRaw([]));\n                    getters.push(key);\n                }\n            }\n        }\n    }\n    // add the state, getters, and action properties\n    /* istanbul ignore if */\n    if (isVue2) {\n        Object.keys(setupStore).forEach((key) => {\n            set(store, key, setupStore[key]);\n        });\n    }\n    else {\n        assign(store, setupStore);\n        // allows retrieving reactive objects with `storeToRefs()`. Must be called after assigning to the reactive object.\n        // Make `storeToRefs()` work with `reactive()` #799\n        assign(toRaw(store), setupStore);\n    }\n    // use this instead of a computed with setter to be able to create it anywhere\n    // without linking the computed lifespan to wherever the store is first\n    // created.\n    Object.defineProperty(store, '$state', {\n        get: () => ((process.env.NODE_ENV !== 'production') && hot ? hotState.value : pinia.state.value[$id]),\n        set: (state) => {\n            /* istanbul ignore if */\n            if ((process.env.NODE_ENV !== 'production') && hot) {\n                throw new Error('cannot set hotState');\n            }\n            $patch(($state) => {\n                assign($state, state);\n            });\n        },\n    });\n    // add the hotUpdate before plugins to allow them to override it\n    /* istanbul ignore else */\n    if ((process.env.NODE_ENV !== 'production')) {\n        store._hotUpdate = markRaw((newStore) => {\n            store._hotUpdating = true;\n            newStore._hmrPayload.state.forEach((stateKey) => {\n                if (stateKey in store.$state) {\n                    const newStateTarget = newStore.$state[stateKey];\n                    const oldStateSource = store.$state[stateKey];\n                    if (typeof newStateTarget === 'object' &&\n                        isPlainObject(newStateTarget) &&\n                        isPlainObject(oldStateSource)) {\n                        patchObject(newStateTarget, oldStateSource);\n                    }\n                    else {\n                        // transfer the ref\n                        newStore.$state[stateKey] = oldStateSource;\n                    }\n                }\n                // patch direct access properties to allow store.stateProperty to work as\n                // store.$state.stateProperty\n                set(store, stateKey, toRef(newStore.$state, stateKey));\n            });\n            // remove deleted state properties\n            Object.keys(store.$state).forEach((stateKey) => {\n                if (!(stateKey in newStore.$state)) {\n                    del(store, stateKey);\n                }\n            });\n            // avoid devtools logging this as a mutation\n            isListening = false;\n            isSyncListening = false;\n            pinia.state.value[$id] = toRef(newStore._hmrPayload, 'hotState');\n            isSyncListening = true;\n            nextTick().then(() => {\n                isListening = true;\n            });\n            for (const actionName in newStore._hmrPayload.actions) {\n                const action = newStore[actionName];\n                set(store, actionName, wrapAction(actionName, action));\n            }\n            // TODO: does this work in both setup and option store?\n            for (const getterName in newStore._hmrPayload.getters) {\n                const getter = newStore._hmrPayload.getters[getterName];\n                const getterValue = isOptionsStore\n                    ? // special handling of options api\n                        computed(() => {\n                            setActivePinia(pinia);\n                            return getter.call(store, store);\n                        })\n                    : getter;\n                set(store, getterName, getterValue);\n            }\n            // remove deleted getters\n            Object.keys(store._hmrPayload.getters).forEach((key) => {\n                if (!(key in newStore._hmrPayload.getters)) {\n                    del(store, key);\n                }\n            });\n            // remove old actions\n            Object.keys(store._hmrPayload.actions).forEach((key) => {\n                if (!(key in newStore._hmrPayload.actions)) {\n                    del(store, key);\n                }\n            });\n            // update the values used in devtools and to allow deleting new properties later on\n            store._hmrPayload = newStore._hmrPayload;\n            store._getters = newStore._getters;\n            store._hotUpdating = false;\n        });\n    }\n    if (USE_DEVTOOLS) {\n        const nonEnumerable = {\n            writable: true,\n            configurable: true,\n            // avoid warning on devtools trying to display this property\n            enumerable: false,\n        };\n        ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach((p) => {\n            Object.defineProperty(store, p, assign({ value: store[p] }, nonEnumerable));\n        });\n    }\n    /* istanbul ignore if */\n    if (isVue2) {\n        // mark the store as ready before plugins\n        store._r = true;\n    }\n    // apply all plugins\n    pinia._p.forEach((extender) => {\n        /* istanbul ignore else */\n        if (USE_DEVTOOLS) {\n            const extensions = scope.run(() => extender({\n                store,\n                app: pinia._a,\n                pinia,\n                options: optionsForPlugin,\n            }));\n            Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));\n            assign(store, extensions);\n        }\n        else {\n            assign(store, scope.run(() => extender({\n                store,\n                app: pinia._a,\n                pinia,\n                options: optionsForPlugin,\n            })));\n        }\n    });\n    if ((process.env.NODE_ENV !== 'production') &&\n        store.$state &&\n        typeof store.$state === 'object' &&\n        typeof store.$state.constructor === 'function' &&\n        !store.$state.constructor.toString().includes('[native code]')) {\n        console.warn(`[üçç]: The \"state\" must be a plain object. It cannot be\\n` +\n            `\\tstate: () => new MyClass()\\n` +\n            `Found in store \"${store.$id}\".`);\n    }\n    // only apply hydrate to option stores with an initial state in pinia\n    if (initialState &&\n        isOptionsStore &&\n        options.hydrate) {\n        options.hydrate(store.$state, initialState);\n    }\n    isListening = true;\n    isSyncListening = true;\n    return store;\n}\nfunction defineStore(\n// TODO: add proper types from above\nidOrOptions, setup, setupOptions) {\n    let id;\n    let options;\n    const isSetupStore = typeof setup === 'function';\n    if (typeof idOrOptions === 'string') {\n        id = idOrOptions;\n        // the option store setup will contain the actual options in this case\n        options = isSetupStore ? setupOptions : setup;\n    }\n    else {\n        options = idOrOptions;\n        id = idOrOptions.id;\n        if ((process.env.NODE_ENV !== 'production') && typeof id !== 'string') {\n            throw new Error(`[üçç]: \"defineStore()\" must be passed a store id as its first argument.`);\n        }\n    }\n    function useStore(pinia, hot) {\n        const hasContext = hasInjectionContext();\n        pinia =\n            // in test mode, ignore the argument provided as we can always retrieve a\n            // pinia instance with getActivePinia()\n            ((process.env.NODE_ENV === 'test') && activePinia && activePinia._testing ? null : pinia) ||\n                (hasContext ? inject(piniaSymbol, null) : null);\n        if (pinia)\n            setActivePinia(pinia);\n        if ((process.env.NODE_ENV !== 'production') && !activePinia) {\n            throw new Error(`[üçç]: \"getActivePinia()\" was called but there was no active Pinia. Did you forget to install pinia?\\n` +\n                `\\tconst pinia = createPinia()\\n` +\n                `\\tapp.use(pinia)\\n` +\n                `This will fail in production.`);\n        }\n        pinia = activePinia;\n        if (!pinia._s.has(id)) {\n            // creating the store registers it in `pinia._s`\n            if (isSetupStore) {\n                createSetupStore(id, setup, options, pinia);\n            }\n            else {\n                createOptionsStore(id, options, pinia);\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                // @ts-expect-error: not the right inferred type\n                useStore._pinia = pinia;\n            }\n        }\n        const store = pinia._s.get(id);\n        if ((process.env.NODE_ENV !== 'production') && hot) {\n            const hotId = '__hot:' + id;\n            const newStore = isSetupStore\n                ? createSetupStore(hotId, setup, options, pinia, true)\n                : createOptionsStore(hotId, assign({}, options), pinia, true);\n            hot._hotUpdate(newStore);\n            // cleanup the state properties and the store from the cache\n            delete pinia.state.value[hotId];\n            pinia._s.delete(hotId);\n        }\n        if ((process.env.NODE_ENV !== 'production') && IS_CLIENT) {\n            const currentInstance = getCurrentInstance();\n            // save stores in instances to access them devtools\n            if (currentInstance &&\n                currentInstance.proxy &&\n                // avoid adding stores that are just built for hot module replacement\n                !hot) {\n                const vm = currentInstance.proxy;\n                const cache = '_pStores' in vm ? vm._pStores : (vm._pStores = {});\n                cache[id] = store;\n            }\n        }\n        // StoreGeneric cannot be casted towards Store\n        return store;\n    }\n    useStore.$id = id;\n    return useStore;\n}\n\nlet mapStoreSuffix = 'Store';\n/**\n * Changes the suffix added by `mapStores()`. Can be set to an empty string.\n * Defaults to `\"Store\"`. Make sure to extend the MapStoresCustomization\n * interface if you are using TypeScript.\n *\n * @param suffix - new suffix\n */\nfunction setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS\n) {\n    mapStoreSuffix = suffix;\n}\n/**\n * Allows using stores without the composition API (`setup()`) by generating an\n * object to be spread in the `computed` field of a component. It accepts a list\n * of store definitions.\n *\n * @example\n * ```js\n * export default {\n *   computed: {\n *     // other computed properties\n *     ...mapStores(useUserStore, useCartStore)\n *   },\n *\n *   created() {\n *     this.userStore // store with id \"user\"\n *     this.cartStore // store with id \"cart\"\n *   }\n * }\n * ```\n *\n * @param stores - list of stores to map to an object\n */\nfunction mapStores(...stores) {\n    if ((process.env.NODE_ENV !== 'production') && Array.isArray(stores[0])) {\n        console.warn(`[üçç]: Directly pass all stores to \"mapStores()\" without putting them in an array:\\n` +\n            `Replace\\n` +\n            `\\tmapStores([useAuthStore, useCartStore])\\n` +\n            `with\\n` +\n            `\\tmapStores(useAuthStore, useCartStore)\\n` +\n            `This will fail in production if not fixed.`);\n        stores = stores[0];\n    }\n    return stores.reduce((reduced, useStore) => {\n        // @ts-expect-error: $id is added by defineStore\n        reduced[useStore.$id + mapStoreSuffix] = function () {\n            return useStore(this.$pinia);\n        };\n        return reduced;\n    }, {});\n}\n/**\n * Allows using state and getters from one store without using the composition\n * API (`setup()`) by generating an object to be spread in the `computed` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapState(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            reduced[key] = function () {\n                return useStore(this.$pinia)[key];\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function () {\n                const store = useStore(this.$pinia);\n                const storeKey = keysOrMapper[key];\n                // for some reason TS is unable to infer the type of storeKey to be a\n                // function\n                return typeof storeKey === 'function'\n                    ? storeKey.call(this, store)\n                    : store[storeKey];\n            };\n            return reduced;\n        }, {});\n}\n/**\n * Alias for `mapState()`. You should use `mapState()` instead.\n * @deprecated use `mapState()` instead.\n */\nconst mapGetters = mapState;\n/**\n * Allows directly using actions from your store without using the composition\n * API (`setup()`) by generating an object to be spread in the `methods` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapActions(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function (...args) {\n                return useStore(this.$pinia)[key](...args);\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function (...args) {\n                return useStore(this.$pinia)[keysOrMapper[key]](...args);\n            };\n            return reduced;\n        }, {});\n}\n/**\n * Allows using state and getters from one store without using the composition\n * API (`setup()`) by generating an object to be spread in the `computed` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapWritableState(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            // @ts-ignore\n            reduced[key] = {\n                get() {\n                    return useStore(this.$pinia)[key];\n                },\n                set(value) {\n                    // it's easier to type it here as any\n                    return (useStore(this.$pinia)[key] = value);\n                },\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            // @ts-ignore\n            reduced[key] = {\n                get() {\n                    return useStore(this.$pinia)[keysOrMapper[key]];\n                },\n                set(value) {\n                    // it's easier to type it here as any\n                    return (useStore(this.$pinia)[keysOrMapper[key]] = value);\n                },\n            };\n            return reduced;\n        }, {});\n}\n\n/**\n * Creates an object of references with all the state, getters, and plugin-added\n * state properties of the store. Similar to `toRefs()` but specifically\n * designed for Pinia stores so methods and non reactive properties are\n * completely ignored.\n *\n * @param store - store to extract the refs from\n */\nfunction storeToRefs(store) {\n    // See https://github.com/vuejs/pinia/issues/852\n    // It's easier to just use toRefs() even if it includes more stuff\n    if (isVue2) {\n        // @ts-expect-error: toRefs include methods and others\n        return toRefs(store);\n    }\n    else {\n        store = toRaw(store);\n        const refs = {};\n        for (const key in store) {\n            const value = store[key];\n            if (isRef(value) || isReactive(value)) {\n                // @ts-expect-error: the key is state or getter\n                refs[key] =\n                    // ---\n                    toRef(store, key);\n            }\n        }\n        return refs;\n    }\n}\n\n/**\n * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need\n * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:\n * https://pinia.vuejs.org/ssr/nuxt.html.\n *\n * @example\n * ```js\n * import Vue from 'vue'\n * import { PiniaVuePlugin, createPinia } from 'pinia'\n *\n * Vue.use(PiniaVuePlugin)\n * const pinia = createPinia()\n *\n * new Vue({\n *   el: '#app',\n *   // ...\n *   pinia,\n * })\n * ```\n *\n * @param _Vue - `Vue` imported from 'vue'.\n */\nconst PiniaVuePlugin = function (_Vue) {\n    // Equivalent of\n    // app.config.globalProperties.$pinia = pinia\n    _Vue.mixin({\n        beforeCreate() {\n            const options = this.$options;\n            if (options.pinia) {\n                const pinia = options.pinia;\n                // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31\n                /* istanbul ignore else */\n                if (!this._provided) {\n                    const provideCache = {};\n                    Object.defineProperty(this, '_provided', {\n                        get: () => provideCache,\n                        set: (v) => Object.assign(provideCache, v),\n                    });\n                }\n                this._provided[piniaSymbol] = pinia;\n                // propagate the pinia instance in an SSR friendly way\n                // avoid adding it to nuxt twice\n                /* istanbul ignore else */\n                if (!this.$pinia) {\n                    this.$pinia = pinia;\n                }\n                pinia._a = this;\n                if (IS_CLIENT) {\n                    // this allows calling useStore() outside of a component setup after\n                    // installing pinia's plugin\n                    setActivePinia(pinia);\n                }\n                if (USE_DEVTOOLS) {\n                    registerPiniaDevtools(pinia._a, pinia);\n                }\n            }\n            else if (!this.$pinia && options.parent && options.parent.$pinia) {\n                this.$pinia = options.parent.$pinia;\n            }\n        },\n        destroyed() {\n            delete this._pStores;\n        },\n    });\n};\n\nexport { MutationType, PiniaVuePlugin, acceptHMRUpdate, createPinia, defineStore, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, skipHydrate, storeToRefs };\n"],"names":["activePinia","setActivePinia","pinia","piniaSymbol","isPlainObject","o","MutationType","IS_CLIENT","USE_DEVTOOLS","_global","bom","blob","autoBom","download","url","name","opts","xhr","saveAs","corsEnabled","click","node","evt","_navigator","isMacOSWebView","downloadSaveAs","msSaveAs","fileSaverSaveAs","a","popup","force","isSafari","isChromeIOS","reader","toastMessage","message","type","piniaMessage","isPinia","checkClipboardAccess","checkNotFocusedError","error","actionGlobalCopyState","actionGlobalPasteState","loadStoresState","actionGlobalSaveState","fileInput","getFileOpener","openFile","resolve","reject","files","file","actionGlobalOpenStateFile","result","text","state","key","storeState","formatDisplay","display","PINIA_ROOT_LABEL","PINIA_ROOT_ID","formatStoreForInspectorTree","store","formatStoreForInspectorState","storeNames","storeMap","storeId","id","getters","getterName","formatEventData","events","data","event","formatMutationType","isTimelineActive","componentStateTypes","MUTATIONS_LAYER_ID","INSPECTOR_ID","assign$1","getStoreType","registerPiniaDevtools","app","setupDevtoolsPlugin","api","nodeId","payload","ctx","proxy","piniaStores","toRaw","stores","inspectedStore","path","addStoreToDevtools","now","after","onError","args","groupId","runningActionId","activeAction","watch","unref","newValue","oldValue","eventData","hotUpdate","markRaw","newStore","$dispose","patchActionForGrouping","actionNames","wrapWithProxy","actions","storeActions","actionName","_actionId","trackedStore","retValue","devtoolsPlugin","options","originalHotUpdate","createPinia","scope","effectScope","ref","_p","toBeInstalled","plugin","isVue2","noop","addSubscription","subscriptions","callback","detached","onCleanup","removeSubscription","idx","getCurrentScope","onScopeDispose","triggerSubscriptions","fallbackRunWithContext","fn","mergeReactiveObjects","target","patchToApply","value","subPatch","targetValue","isRef","isReactive","skipHydrateSymbol","shouldHydrate","obj","assign","isComputed","createOptionsStore","hot","initialState","setup","localState","toRefs","computedGetters","computed","createSetupStore","$id","isOptionsStore","optionsForPlugin","$subscribeOptions","isListening","isSyncListening","actionSubscriptions","debuggerEvents","hotState","activeListener","$patch","partialStateOrMutator","subscriptionMutation","myListenerId","nextTick","$reset","newState","$state","wrapAction","action","afterCallbackList","onErrorCallbackList","ret","_hmrPayload","partialStore","stopWatcher","reactive","runWithContext","setupStore","prop","actionValue","nonEnumerable","p","extender","extensions","defineStore","idOrOptions","setupOptions","isSetupStore","useStore","hasContext","hasInjectionContext","inject","storeToRefs","refs","toRef"],"mappings":"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","x_google_ignoreList":[0]}